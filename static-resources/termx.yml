openapi: 3.0.1
info:
  title: TermX
  description: "TermX is an open-source knowledge development, management and sharing\
    \ platform, including a terminology server, wiki, model designer, transformation\
    \ editor, and authoring and publishing tools."
  contact:
    name: TermX support
    url: https://termx.org
    email: support@termx.org
externalDocs:
  description: Read more about TermX
  url: https://tutorial.termx.org/en/about
security:
- openid: []
paths:
  /api/atc-est/import:
    post:
      tags:
      - Editions
      operationId: importAtcEst
      parameters:
      - name: url
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemImportConfiguration"
        required: true
      responses:
        "200":
          description: importAtcEst 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/atc/import:
    post:
      tags:
      - Editions
      operationId: importAtc
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemImportConfiguration"
        required: true
      responses:
        "200":
          description: importAtc 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/file-importer/analyze:
    post:
      tags:
      - File importer
      operationId: analyze
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                request:
                  type: string
            encoding:
              file:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: analyze 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileAnalysisResponse"
  /api/file-importer/association/csv-template:
    get:
      tags:
      - File importer
      operationId: getTemplate
      responses:
        "200":
          description: getTemplate 200 response
          content:
            application/csv:
              schema:
                type: object
  /api/file-importer/association/process:
    post:
      tags:
      - File importer
      operationId: process
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
                request:
                  type: string
            encoding:
              file:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: process 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/file-importer/code-system/process:
    post:
      tags:
      - File importer
      operationId: process_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                request:
                  type: string
            encoding:
              file:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: process_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/file-importer/map-set/csv-template:
    get:
      tags:
      - File importer
      operationId: getTemplate_1
      responses:
        "200":
          description: getTemplate_1 200 response
          content:
            application/csv:
              schema:
                type: object
  /api/file-importer/map-set/process:
    post:
      tags:
      - File importer
      operationId: process_2
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
                request:
                  type: string
            encoding:
              file:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: process_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/file-importer/value-set/process:
    post:
      tags:
      - File importer
      operationId: process_3
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                request:
                  type: string
            encoding:
              file:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: process_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/health:
    get:
      tags:
      - Management Endpoints
      operationId: getHealth
      responses:
        "200":
          description: getHealth 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HealthResult"
  /api/health/{selector}:
    get:
      tags:
      - Management Endpoints
      operationId: getHealth_1
      parameters:
      - name: selector
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/HealthCheckType"
      responses:
        "200":
          description: getHealth_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HealthResult"
  /api/icd10-est/import:
    post:
      tags:
      - Editions
      operationId: importIcd10Est
      parameters:
      - name: url
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemImportConfiguration"
        required: true
      responses:
        "200":
          description: importIcd10Est 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/icd10/import:
    post:
      tags:
      - Editions
      operationId: importIcd10
      parameters:
      - name: url
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemImportConfiguration"
        required: true
      responses:
        "200":
          description: importIcd10 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/ichi-uz/import:
    post:
      tags:
      - Editions
      operationId: importIchiUz
      parameters:
      - name: url
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemImportConfiguration"
        required: true
      responses:
        "200":
          description: importIchiUz 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/implementation-guides:
    get:
      tags:
      - Modeler
      operationId: query
      responses:
        "200":
          description: query 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_ImplementationGuide_"
  /api/implementation-guides/transaction:
    post:
      tags:
      - Modeler
      operationId: save
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImplementationGuideTransactionRequest"
        required: true
      responses:
        "200":
          description: save 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}:
    get:
      tags:
      - Modeler
      operationId: load
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: load 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImplementationGuide"
    delete:
      tags:
      - Modeler
      operationId: delete
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: delete 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}/change-id:
    post:
      tags:
      - Modeler
      operationId: changeId
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: changeId 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}/provenances:
    get:
      tags:
      - Modeler
      operationId: queryProvenances
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: queryProvenances 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Provenance"
  /api/implementation-guides/{ig}/versions:
    get:
      tags:
      - Modeler
      operationId: queryVersions
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryVersions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_ImplementationGuideVersion_"
    post:
      tags:
      - Modeler
      operationId: createVersion
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImplementationGuideVersion"
        required: true
      responses:
        "200":
          description: createVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}/versions/{version}:
    get:
      tags:
      - Modeler
      operationId: getVersion
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getVersion 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImplementationGuideVersion"
    put:
      tags:
      - Modeler
      operationId: updateVersion
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImplementationGuideVersion"
        required: true
      responses:
        "200":
          description: updateVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}/versions/{version}/activate:
    post:
      tags:
      - Modeler
      operationId: activateVersion
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: activateVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}/versions/{version}/draft:
    post:
      tags:
      - Modeler
      operationId: saveAsDraftVersion
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: saveAsDraftVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}/versions/{version}/groups:
    post:
      tags:
      - Modeler
      operationId: saveVersionGroups
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ImplementationGuideGroup"
        required: true
      responses:
        "200":
          description: saveVersionGroups 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}/versions/{version}/pages:
    get:
      tags:
      - Modeler
      operationId: loadVersionPages
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: loadVersionPages 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ImplementationGuidePage"
    post:
      tags:
      - Modeler
      operationId: saveVersionPages
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ImplementationGuidePage"
        required: true
      responses:
        "200":
          description: saveVersionPages 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}/versions/{version}/resources:
    get:
      tags:
      - Modeler
      operationId: loadVersionResources
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: loadVersionResources 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ImplementationGuideResource"
    post:
      tags:
      - Modeler
      operationId: saveVersionResources
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ImplementationGuideResource"
        required: true
      responses:
        "200":
          description: saveVersionResources 200 response
          content:
            application/json:
              schema:
                type: object
  /api/implementation-guides/{ig}/versions/{version}/retire:
    post:
      tags:
      - Modeler
      operationId: retireVersion
      parameters:
      - name: ig
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: retireVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/info:
    get:
      tags:
      - Management Endpoints
      operationId: getInfo
      responses:
        "200":
          description: getInfo 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /api/loinc/import:
    post:
      tags:
      - Editions
      operationId: process_4
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                partsFile:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                terminologyFile:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                supplementaryPropertiesFile:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                panelsFile:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                answerListFile:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                answerListLinkFile:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                translationsFile:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                orderObservationFile:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                request:
                  type: string
            encoding:
              translationsFile:
                contentType: application/octet-stream
              answerListFile:
                contentType: application/octet-stream
              supplementaryPropertiesFile:
                contentType: application/octet-stream
              orderObservationFile:
                contentType: application/octet-stream
              panelsFile:
                contentType: application/octet-stream
              partsFile:
                contentType: application/octet-stream
              answerListLinkFile:
                contentType: application/octet-stream
              terminologyFile:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: process_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/observation-definitions:
    get:
      tags:
      - Observation definition
      operationId: search
      responses:
        "200":
          description: search 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_ObservationDefinition_"
    post:
      tags:
      - Observation definition
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationDefinition"
        required: true
      responses:
        "200":
          description: create 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObservationDefinition"
  /api/observation-definitions/import:
    post:
      tags:
      - Observation definition
      operationId: importDefinitions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationDefinitionImportRequest"
        required: true
      responses:
        "200":
          description: importDefinitions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/observation-definitions/{id}:
    get:
      tags:
      - Observation definition
      operationId: load_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: load_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObservationDefinition"
    put:
      tags:
      - Observation definition
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationDefinition"
        required: true
      responses:
        "200":
          description: update 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObservationDefinition"
  /api/orphanet/import:
    post:
      tags:
      - Editions
      operationId: importIcd10_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
                request:
                  type: string
            encoding:
              file:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: importIcd10_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/page-comments:
    get:
      tags:
      - Wiki
      operationId: query_1
      responses:
        "200":
          description: query_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_PageComment_"
    post:
      tags:
      - Wiki
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageComment"
        required: true
      responses:
        "200":
          description: create_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/page-comments/{id}:
    put:
      tags:
      - Wiki
      operationId: update_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageComment"
        required: true
      responses:
        "200":
          description: update_1 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Wiki
      operationId: delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: delete_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/page-comments/{id}/resolve:
    post:
      tags:
      - Wiki
      operationId: resolve
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: resolve 200 response
          content:
            application/json:
              schema:
                type: object
  /api/page-contents:
    get:
      tags:
      - Wiki
      operationId: queryPageContents
      responses:
        "200":
          description: queryPageContents 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_PageContent_"
  /api/page-links:
    get:
      tags:
      - Wiki
      operationId: queryPages
      responses:
        "200":
          description: queryPages 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_PageLink_"
  /api/page-links/{id}/move:
    post:
      tags:
      - Wiki
      operationId: movePage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageLinkMoveRequest"
        required: true
      responses:
        "200":
          description: movePage 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PageLink"
  /api/page-relations:
    get:
      tags:
      - Wiki
      operationId: queryPageRelations
      responses:
        "200":
          description: queryPageRelations 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_PageRelation_"
  /api/pages:
    get:
      tags:
      - Wiki
      operationId: queryPages_1
      responses:
        "200":
          description: queryPages_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_Page_"
    post:
      tags:
      - Wiki
      operationId: createPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageController.PageRequest"
        required: true
      responses:
        "200":
          description: createPage 200 response
          content:
            application/json:
              schema:
                type: object
  /api/pages/tree:
    get:
      tags:
      - Wiki
      operationId: loadTree
      parameters:
      - name: spaceId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: loadTree 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PageTreeItem"
  /api/pages/{id}:
    get:
      tags:
      - Wiki
      operationId: getPage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getPage 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
    put:
      tags:
      - Wiki
      operationId: updatePage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageController.PageRequest"
        required: true
      responses:
        "200":
          description: updatePage 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Wiki
      operationId: deletePage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deletePage 200 response
          content:
            application/json:
              schema:
                type: object
  /api/pages/{id}/contents:
    post:
      tags:
      - Wiki
      operationId: savePageContent
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageContent"
        required: true
      responses:
        "200":
          description: savePageContent 200 response
          content:
            application/json:
              schema:
                type: object
  /api/pages/{id}/contents/{contentId}:
    put:
      tags:
      - Wiki
      operationId: updatePageContent
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: contentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageContent"
        required: true
      responses:
        "200":
          description: updatePageContent 200 response
          content:
            application/json:
              schema:
                type: object
  /api/pages/{id}/contents/{contentId}/history:
    get:
      tags:
      - Wiki
      operationId: queryPageContentHistory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: contentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: queryPageContentHistory 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_PageContentHistoryItem_"
  /api/pages/{id}/files:
    get:
      tags:
      - Wiki
      operationId: getFiles
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getFiles 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Page.PageAttachment"
    post:
      tags:
      - Wiki
      operationId: uploadFiles
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "200":
          description: uploadFiles 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/Page.PageAttachment"
  /api/pages/{id}/files/{fileName}:
    get:
      tags:
      - Wiki
      operationId: getFile
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: fileName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFile 200 response
          content:
            application/json:
              schema:
                type: string
                format: binary
    delete:
      tags:
      - Wiki
      operationId: deleteFile
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: fileName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteFile 200 response
  /api/pages/{id}/path:
    get:
      tags:
      - Wiki
      operationId: getPath
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getPath 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int64
  /api/related-artifacts:
    post:
      tags:
      - Terminology
      operationId: findRelatedArtifacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RelatedArtifactRequest"
        required: true
      responses:
        "200":
          description: findRelatedArtifacts 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RelatedArtifact"
  /api/snomed/branches:
    get:
      tags:
      - SNOMED
      operationId: loadBranches
      responses:
        "200":
          description: loadBranches 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedBranch"
    post:
      tags:
      - SNOMED
      operationId: createBranch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnomedBranchRequest"
        required: true
      responses:
        "200":
          description: createBranch 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedBranch"
  /api/snomed/branches/{path}:
    get:
      tags:
      - SNOMED
      operationId: loadBranch
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: loadBranch 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedBranch"
    put:
      tags:
      - SNOMED
      operationId: updateBranch
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnomedBranchRequest"
        required: true
      responses:
        "200":
          description: updateBranch 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedBranch"
    delete:
      tags:
      - SNOMED
      operationId: deleteBranch
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteBranch 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/branches/{path}/descriptions/{descriptionId}:
    delete:
      tags:
      - SNOMED
      operationId: deleteDescription
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      - name: descriptionId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteDescription 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/branches/{path}/descriptions/{descriptionId}/deactivate:
    post:
      tags:
      - SNOMED
      operationId: deactivateDescription
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      - name: descriptionId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deactivateDescription 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/branches/{path}/descriptions/{descriptionId}/reactivate:
    post:
      tags:
      - SNOMED
      operationId: reactivateDescription
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      - name: descriptionId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: reactivateDescription 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/branches/{path}/integrity-check:
    post:
      tags:
      - SNOMED
      operationId: branchIntegrityCheck
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: branchIntegrityCheck 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/branches/{path}/lock:
    post:
      tags:
      - SNOMED
      operationId: lockBranch
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      - name: lockMessage
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: lockBranch 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/branches/{path}/unlock:
    post:
      tags:
      - SNOMED
      operationId: unlockBranch
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unlockBranch 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/codesystems:
    get:
      tags:
      - SNOMED
      operationId: loadCodeSystems
      responses:
        "200":
          description: loadCodeSystems 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedCodeSystem"
    post:
      tags:
      - SNOMED
      operationId: createCodeSystem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnomedCodeSystem"
        required: true
      responses:
        "200":
          description: createCodeSystem 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/codesystems/{shortName}:
    get:
      tags:
      - SNOMED
      operationId: loadCodeSystem
      parameters:
      - name: shortName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: loadCodeSystem 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedCodeSystem"
    put:
      tags:
      - SNOMED
      operationId: createCodeSystem_1
      parameters:
      - name: shortName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnomedCodeSystem"
        required: true
      responses:
        "200":
          description: createCodeSystem_1 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - SNOMED
      operationId: deleteCodeSystem
      parameters:
      - name: shortName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteCodeSystem 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/codesystems/{shortName}/upgrade:
    post:
      tags:
      - SNOMED
      operationId: upgradeCodeSystem
      parameters:
      - name: shortName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnomedCodeSystemUpgradeRequest"
        required: true
      responses:
        "200":
          description: upgradeCodeSystem 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/codesystems/{shortName}/versions:
    post:
      tags:
      - SNOMED
      operationId: createCodeSystemVersion
      parameters:
      - name: shortName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnomedCodeSystem.SnomedCodeSystemVersion"
        required: true
      responses:
        "200":
          description: createCodeSystemVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/concepts:
    get:
      tags:
      - SNOMED
      operationId: findConcepts
      responses:
        "200":
          description: findConcepts 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedSearchResult_SnomedConcept_"
  /api/snomed/concepts/export-csv:
    post:
      tags:
      - SNOMED
      operationId: startConceptCsvExport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnomedConceptSearchParams"
        required: true
      responses:
        "200":
          description: startConceptCsvExport 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/concepts/export-csv/result/{lorqueProcessId}:
    get:
      tags:
      - SNOMED
      operationId: getConceptCsv
      parameters:
      - name: lorqueProcessId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getConceptCsv 200 response
          content:
            application/csv:
              schema:
                type: object
  /api/snomed/concepts/{conceptId}:
    get:
      tags:
      - SNOMED
      operationId: loadConcept
      parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: loadConcept 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedConcept"
  /api/snomed/concepts/{conceptId}/children:
    get:
      tags:
      - SNOMED
      operationId: findConceptChildren
      parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: findConceptChildren 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedConcept"
  /api/snomed/concepts/{conceptId}/provenances:
    get:
      tags:
      - SNOMED
      operationId: queryProvenances_1
      parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryProvenances_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Provenance"
  /api/snomed/concepts/{conceptId}/translations:
    get:
      tags:
      - SNOMED
      operationId: loadTranslations
      parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: loadTranslations 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedTranslation"
    post:
      tags:
      - SNOMED
      operationId: saveTranslations
      parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SnomedTranslation"
        required: true
      responses:
        "200":
          description: saveTranslations 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/descriptions:
    get:
      tags:
      - SNOMED
      operationId: findConceptDescriptions
      parameters:
      - name: term
        in: query
        schema:
          type: string
      - name: active
        in: query
        schema:
          type: boolean
      - name: language
        in: query
        schema:
          type: string
      - name: semanticTags
        in: query
        schema:
          type: string
      - name: conceptActive
        in: query
        schema:
          type: boolean
      - name: groupByConcept
        in: query
        schema:
          type: boolean
      - name: limit
        in: query
        schema:
          type: integer
          format: int64
      - name: branch
        in: query
        schema:
          type: string
      responses:
        "200":
          description: findConceptDescriptions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedDescriptionItemResponse"
  /api/snomed/exports:
    post:
      tags:
      - SNOMED
      operationId: createExportJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnomedExportRequest"
        required: true
      responses:
        "200":
          description: createExportJob 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/snomed/exports/archive/result/{lorqueProcessId}:
    get:
      tags:
      - SNOMED
      operationId: getRF2File
      parameters:
      - name: lorqueProcessId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getRF2File 200 response
          content:
            application/zip:
              schema:
                type: object
  /api/snomed/exports/{jobId}/archive:
    get:
      tags:
      - SNOMED
      operationId: getRF2File_1
      parameters:
      - name: jobId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getRF2File_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/imports:
    post:
      tags:
      - SNOMED
      operationId: createImportJob
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
                request:
                  type: string
            encoding:
              file:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: createImportJob 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/snomed/imports/{jobId}:
    get:
      tags:
      - SNOMED
      operationId: loadImportJob
      parameters:
      - name: jobId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: loadImportJob 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedImportJob"
  /api/snomed/refset-members:
    get:
      tags:
      - SNOMED
      operationId: findRefsetMembers
      responses:
        "200":
          description: findRefsetMembers 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedRefsetMemberResponse"
  /api/snomed/refsets:
    get:
      tags:
      - SNOMED
      operationId: findRefsets
      responses:
        "200":
          description: findRefsets 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedRefsetResponse"
  /api/snomed/translations:
    get:
      tags:
      - SNOMED
      operationId: queryTranslations
      parameters:
      - name: active
        in: query
        schema:
          type: boolean
          nullable: true
      - name: unlinked
        in: query
        schema:
          type: boolean
          nullable: true
      - name: branch
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: queryTranslations 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedTranslation"
  /api/snomed/translations/export-rf2:
    post:
      tags:
      - SNOMED
      operationId: startRF2Export
      responses:
        "200":
          description: startRF2Export 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/translations/export-rf2/result/{lorqueProcessId}:
    get:
      tags:
      - SNOMED
      operationId: getRF2
      parameters:
      - name: lorqueProcessId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getRF2 200 response
          content:
            application/zip:
              schema:
                type: object
  /api/snomed/translations/{id}:
    get:
      tags:
      - SNOMED
      operationId: loadTranslation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: loadTranslation 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnomedTranslation"
  /api/snomed/translations/{id}/add-to-branch:
    post:
      tags:
      - SNOMED
      operationId: addTranslationToBranch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: addTranslationToBranch 200 response
          content:
            application/json:
              schema:
                type: object
  /api/snomed/{path}/authoring-stats/changed-fully-specified-names:
    get:
      tags:
      - SNOMED
      operationId: getChangedFsn
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getChangedFsn 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedAuthoringStatsResponse"
  /api/snomed/{path}/authoring-stats/inactivated-synonyms:
    get:
      tags:
      - SNOMED
      operationId: getInactivatedSynonyms
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getInactivatedSynonyms 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedAuthoringStatsResponse"
  /api/snomed/{path}/authoring-stats/new-descriptions:
    get:
      tags:
      - SNOMED
      operationId: getNewDescriptions
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getNewDescriptions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedAuthoringStatsResponse"
  /api/snomed/{path}/authoring-stats/new-synonyms-on-existing-concepts:
    get:
      tags:
      - SNOMED
      operationId: getNewSynonyms
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getNewSynonyms 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedAuthoringStatsResponse"
  /api/snomed/{path}/authoring-stats/reactivated-synonyms:
    get:
      tags:
      - SNOMED
      operationId: getReactivatedSynonyms
      parameters:
      - name: path
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getReactivatedSynonyms 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SnomedAuthoringStatsResponse"
  /api/spaces:
    get:
      tags:
      - Space
      operationId: search_1
      responses:
        "200":
          description: search_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_Space_"
    post:
      tags:
      - Space
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Space"
        required: true
      responses:
        "200":
          description: create_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
  /api/spaces/github/providers:
    get:
      tags:
      - Space
      operationId: getProviders
      responses:
        "200":
          description: getProviders 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/spaces/sync:
    post:
      tags:
      - Space
      operationId: importSpace
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  nullable: true
                  items:
                    type: string
                    format: binary
            encoding:
              file:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: importSpace 200 response
          content:
            application/json:
              schema:
                type: object
  /api/spaces/{id}:
    get:
      tags:
      - Space
      operationId: load_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: load_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
    put:
      tags:
      - Space
      operationId: update_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Space"
        required: true
      responses:
        "200":
          description: update_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
  /api/spaces/{id}/diff:
    get:
      tags:
      - Space
      operationId: diff
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: packageCode
        in: query
        schema:
          type: string
          nullable: true
      - name: version
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: diff 200 response
          content:
            application/json:
              schema:
                type: object
  /api/spaces/{id}/github/authenticate:
    post:
      tags:
      - Space
      operationId: authenticate
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpaceGithubController.SpaceGithubAuthRequest"
        required: true
      responses:
        "200":
          description: authenticate 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceGithubService.SpaceGithubAuthResult"
  /api/spaces/{id}/github/diff:
    get:
      tags:
      - Space
      operationId: prepareFiles
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: file
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: prepareFiles 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GithubService.GithubDiff"
  /api/spaces/{id}/github/pull:
    post:
      tags:
      - Space
      operationId: pull
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpaceGithubController.SpaceGithubPullRequest"
        required: true
      responses:
        "200":
          description: pull 200 response
          content:
            application/json:
              schema:
                type: object
  /api/spaces/{id}/github/push:
    post:
      tags:
      - Space
      operationId: push
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpaceGithubController.SpaceGithubCommitRequest"
        required: true
      responses:
        "200":
          description: push 200 response
          content:
            application/json:
              schema:
                type: object
  /api/spaces/{id}/github/status:
    get:
      tags:
      - Space
      operationId: prepareFiles_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: prepareFiles_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GithubService.GithubStatus"
  /api/spaces/{id}/overview:
    get:
      tags:
      - Space
      operationId: overview
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: packageCode
        in: query
        schema:
          type: string
          nullable: true
      - name: version
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: overview 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceOverviewResponse"
  /api/spaces/{id}/sync:
    post:
      tags:
      - Space
      operationId: syncResources
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
        required: true
      responses:
        "200":
          description: syncResources 200 response
          content:
            application/json:
              schema:
                type: object
  /api/structure-definitions:
    get:
      tags:
      - Modeler
      operationId: queryStructureDefinitions
      responses:
        "200":
          description: queryStructureDefinitions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_StructureDefinition_"
    post:
      tags:
      - Modeler
      operationId: saveStructureDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StructureDefinition"
        required: true
      responses:
        "200":
          description: saveStructureDefinition 200 response
          content:
            application/json:
              schema:
                type: object
  /api/structure-definitions/{id}:
    get:
      tags:
      - Modeler
      operationId: getStructureDefinition
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getStructureDefinition 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StructureDefinition"
    put:
      tags:
      - Modeler
      operationId: updateStructureDefinition
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StructureDefinition"
        required: true
      responses:
        "200":
          description: updateStructureDefinition 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Modeler
      operationId: deleteStructureDefinition
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteStructureDefinition 200 response
          content:
            application/json:
              schema:
                type: object
  /api/tags:
    get:
      tags:
      - Wiki
      operationId: getAll
      responses:
        "200":
          description: getAll 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
  /api/templates:
    get:
      tags:
      - Wiki
      operationId: queryTemplates
      responses:
        "200":
          description: queryTemplates 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_Template_"
    post:
      tags:
      - Wiki
      operationId: saveTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: saveTemplate 200 response
          content:
            application/json:
              schema:
                type: object
  /api/templates/{id}:
    get:
      tags:
      - Wiki
      operationId: getTemplate_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getTemplate_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    put:
      tags:
      - Wiki
      operationId: updateTemplate
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: updateTemplate 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Wiki
      operationId: deleteTemplate
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteTemplate 200 response
          content:
            application/json:
              schema:
                type: object
  /api/tm/projects:
    get:
      tags:
      - Task management
      operationId: loadProjects
      responses:
        "200":
          description: loadProjects 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CodeName"
  /api/tm/projects/{code}/workflows:
    get:
      tags:
      - Task management
      operationId: loadProjectWorkflows
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: loadProjectWorkflows 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
  /api/tm/tasks:
    get:
      tags:
      - Task management
      operationId: queryTasks
      responses:
        "200":
          description: queryTasks 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_Task_"
    post:
      tags:
      - Task management
      operationId: saveTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "200":
          description: saveTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
  /api/tm/tasks/{number}:
    get:
      tags:
      - Task management
      operationId: loadTask
      parameters:
      - name: number
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: loadTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    put:
      tags:
      - Task management
      operationId: updateTask
      parameters:
      - name: number
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "200":
          description: updateTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    patch:
      tags:
      - Task management
      operationId: patchTask
      parameters:
      - name: number
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchUtil.PatchRequest"
        required: true
      responses:
        "200":
          description: patchTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
  /api/tm/tasks/{number}/activities:
    post:
      tags:
      - Task management
      operationId: createTaskActivity
      parameters:
      - name: number
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: createTaskActivity 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task.TaskActivity"
  /api/tm/tasks/{number}/activities/{id}:
    put:
      tags:
      - Task management
      operationId: createTaskActivity_1
      parameters:
      - name: number
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: createTaskActivity_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task.TaskActivity"
    delete:
      tags:
      - Task management
      operationId: deleteTaskActivity
      parameters:
      - name: number
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteTaskActivity 200 response
          content:
            application/json:
              schema:
                type: object
  /api/transformation-definitions:
    get:
      tags:
      - Modeler
      operationId: search_2
      responses:
        "200":
          description: search_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_TransformationDefinition_"
    post:
      tags:
      - Modeler
      operationId: create_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformationDefinition"
        required: true
      responses:
        "200":
          description: create_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationDefinition"
  /api/transformation-definitions/base-resources:
    get:
      tags:
      - Modeler
      operationId: loadBaseResources
      responses:
        "200":
          description: loadBaseResources 200 response
          content:
            application/json:
              schema:
                type: string
  /api/transformation-definitions/compose-fml:
    post:
      tags:
      - Modeler
      operationId: composeFml
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformationDefinition"
        required: true
      responses:
        "200":
          description: composeFml 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationDefinitionController.FmlComposeResult"
  /api/transformation-definitions/generate-fml:
    post:
      tags:
      - Modeler
      operationId: generateFml
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformationDefinitionController.FmlGenerateRequest"
        required: true
      responses:
        "200":
          description: generateFml 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationDefinitionController.FmlGenerateResult"
  /api/transformation-definitions/generate-input:
    post:
      tags:
      - Modeler
      operationId: generateInput
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformationDefinitionController.GenerateInputRequest"
        required: true
      responses:
        "200":
          description: generateInput 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationDefinitionController.GenerateInputResponse"
  /api/transformation-definitions/parse-fml:
    post:
      tags:
      - Modeler
      operationId: parse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformationDefinitionController.ParseRequest"
        required: true
      responses:
        "200":
          description: parse 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationDefinitionController.ParseResponse"
  /api/transformation-definitions/transform:
    post:
      tags:
      - Modeler
      operationId: transform
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformationDefinitionController.TransformationRequest"
        required: true
      responses:
        "200":
          description: transform 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationResult"
  /api/transformation-definitions/transform-resource-content:
    post:
      tags:
      - Modeler
      operationId: transformResourceContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformationDefinition.TransformationDefinitionResource"
        required: true
      responses:
        "200":
          description: transformResourceContent 200 response
          content:
            application/json:
              schema:
                type: string
  /api/transformation-definitions/transform-resources:
    post:
      tags:
      - Modeler
      operationId: transformResources
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TransformationDefinition.TransformationDefinitionResource"
        required: true
      responses:
        "200":
          description: transformResources 200 response
          content:
            application/json:
              schema:
                type: string
  /api/transformation-definitions/{id}:
    get:
      tags:
      - Modeler
      operationId: load_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: load_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationDefinition"
    put:
      tags:
      - Modeler
      operationId: update_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformationDefinition"
        required: true
      responses:
        "200":
          description: update_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationDefinition"
    delete:
      tags:
      - Modeler
      operationId: delete_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: delete_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/transformation-definitions/{id}/duplicate:
    post:
      tags:
      - Modeler
      operationId: duplicate
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: duplicate 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationDefinition"
  /api/transformation-definitions/{id}/transform:
    post:
      tags:
      - Modeler
      operationId: transformInstance
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransformationDefinitionController.InstanceTransformationRequest"
        required: true
      responses:
        "200":
          description: transformInstance 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransformationResult"
  /api/ts/association-types:
    get:
      tags:
      - Terminology
      operationId: queryAssociationTypes
      responses:
        "200":
          description: queryAssociationTypes 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_AssociationType_"
    post:
      tags:
      - Terminology
      operationId: createAssociationType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssociationType"
        required: true
      responses:
        "200":
          description: createAssociationType 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/association-types/{code}:
    get:
      tags:
      - Terminology
      operationId: getAssociationType
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getAssociationType 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssociationType"
    put:
      tags:
      - Terminology
      operationId: updateAssociationType
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssociationType"
        required: true
      responses:
        "200":
          description: updateAssociationType 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Terminology
      operationId: deleteAssociationType
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteAssociationType 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems:
    get:
      tags:
      - Terminology
      operationId: queryCodeSystems
      responses:
        "200":
          description: queryCodeSystems 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_CodeSystem_"
  /api/ts/code-systems/compare:
    get:
      tags:
      - Terminology
      operationId: compare
      parameters:
      - name: source
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: target
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: compare 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSystemCompareResult"
  /api/ts/code-systems/concepts/export-csv/result/{lorqueProcessId}:
    get:
      tags:
      - Terminology
      operationId: getConceptExportCSV
      parameters:
      - name: lorqueProcessId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getConceptExportCSV 200 response
          content:
            application/csv:
              schema:
                type: object
  /api/ts/code-systems/concepts/export-xlsx/result/{lorqueProcessId}:
    get:
      tags:
      - Terminology
      operationId: getConceptExportXLSX
      parameters:
      - name: lorqueProcessId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getConceptExportXLSX 200 response
          content:
            application/vnd.ms-excel:
              schema:
                type: object
  /api/ts/code-systems/transaction:
    post:
      tags:
      - Terminology
      operationId: saveCodeSystemTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemTransactionRequest"
        required: true
      responses:
        "200":
          description: saveCodeSystemTransaction 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/validator/detect-circular-dependencies:
    get:
      tags:
      - Terminology
      operationId: detectCircularDependencies
      parameters:
      - name: versionId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: detectCircularDependencies 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSystemCircularDependenciesDetectorResult"
  /api/ts/code-systems/validator/validate-uniqueness:
    post:
      tags:
      - Terminology
      operationId: validateUniqueness
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemUniquenessValidatorRequest"
        required: true
      responses:
        "200":
          description: validateUniqueness 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}:
    get:
      tags:
      - Terminology
      operationId: getCodeSystem
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: decorate
        in: query
        schema:
          type: boolean
          nullable: true
      responses:
        "200":
          description: getCodeSystem 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSystem"
    delete:
      tags:
      - Terminology
      operationId: deleteCodeSystem_1
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteCodeSystem_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/change-id:
    post:
      tags:
      - Terminology
      operationId: changeCodeSystemId
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: changeCodeSystemId 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/concepts:
    get:
      tags:
      - Terminology
      operationId: queryConcepts
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryConcepts 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_Concept_"
  /api/ts/code-systems/{codeSystem}/concepts/transaction:
    post:
      tags:
      - Terminology
      operationId: saveConceptTransaction
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConceptTransactionRequest"
        required: true
      responses:
        "200":
          description: saveConceptTransaction 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/concepts/{code}:
    get:
      tags:
      - Terminology
      operationId: getConcept
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getConcept 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Concept"
    delete:
      tags:
      - Terminology
      operationId: deleteConcept
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteConcept 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/concepts/{code}/propagate-properties:
    post:
      tags:
      - Terminology
      operationId: propagateProperties
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: code
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemController.CodeSystemConceptPropertyPropagationRequest"
        required: true
      responses:
        "200":
          description: propagateProperties 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/duplicate:
    post:
      tags:
      - Terminology
      operationId: duplicateCodeSystem
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemController.CodeSystemDuplicateRequest"
        required: true
      responses:
        "200":
          description: duplicateCodeSystem 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/entity-properties:
    get:
      tags:
      - Terminology
      operationId: queryEntityProperties
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryEntityProperties 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_EntityProperty_"
    post:
      tags:
      - Terminology
      operationId: createEntityProperty
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityProperty"
        required: true
      responses:
        "200":
          description: createEntityProperty 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/entity-properties/{id}:
    get:
      tags:
      - Terminology
      operationId: getEntityProperty
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getEntityProperty 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityProperty"
    put:
      tags:
      - Terminology
      operationId: updateEntityProperty
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityProperty"
        required: true
      responses:
        "200":
          description: updateEntityProperty 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Terminology
      operationId: deleteEntityProperty
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteEntityProperty 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/entity-properties/{propertyId}/delete-usages:
    post:
      tags:
      - Terminology
      operationId: deleteEntityPropertyUsages
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteEntityPropertyUsages 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/entity-property-concept-summary:
    get:
      tags:
      - Terminology
      operationId: getConceptSummary
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: entityPropertyId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: entityPropertyValues
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: getConceptSummary 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSystemEntityPropertyConceptSummary"
  /api/ts/code-systems/{codeSystem}/entity-property-summary:
    get:
      tags:
      - Terminology
      operationId: getSummary
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: entityPropertyValues
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: getSummary 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSystemEntityPropertySummary"
  /api/ts/code-systems/{codeSystem}/entity-versions:
    get:
      tags:
      - Terminology
      operationId: queryEntityVersions
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryEntityVersions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_CodeSystemEntityVersion_"
  /api/ts/code-systems/{codeSystem}/entity-versions/supplement:
    post:
      tags:
      - Terminology
      operationId: supplementEntityVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemSupplementRequest"
        required: true
      responses:
        "200":
          description: supplementEntityVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/entity-versions/{id}:
    delete:
      tags:
      - Terminology
      operationId: deleteEntityVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteEntityVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/entity-versions/{id}/activate:
    post:
      tags:
      - Terminology
      operationId: activateEntityVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: activateEntityVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/entity-versions/{id}/draft:
    post:
      tags:
      - Terminology
      operationId: saveAsDraftEntityVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: saveAsDraftEntityVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/entity-versions/{id}/duplicate:
    post:
      tags:
      - Terminology
      operationId: duplicateEntityVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: duplicateEntityVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/entity-versions/{id}/references:
    get:
      tags:
      - Terminology
      operationId: getReferences
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getReferences 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CodeSystemAssociation"
  /api/ts/code-systems/{codeSystem}/entity-versions/{id}/retire:
    post:
      tags:
      - Terminology
      operationId: retireEntityVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: retireEntityVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/provenances:
    get:
      tags:
      - Terminology
      operationId: queryProvenances_2
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: queryProvenances_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Provenance"
  /api/ts/code-systems/{codeSystem}/supplement:
    post:
      tags:
      - Terminology
      operationId: supplementCodeSystem
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemSupplementRequest"
        required: true
      responses:
        "200":
          description: supplementCodeSystem 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions:
    get:
      tags:
      - Terminology
      operationId: queryCodeSystemVersions
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryCodeSystemVersions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_CodeSystemVersion_"
    post:
      tags:
      - Terminology
      operationId: createCodeSystemVersion_1
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemVersion"
        required: true
      responses:
        "200":
          description: createCodeSystemVersion_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}:
    get:
      tags:
      - Terminology
      operationId: getCodeSystemVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getCodeSystemVersion 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSystemVersion"
    put:
      tags:
      - Terminology
      operationId: updateCodeSystemVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemVersion"
        required: true
      responses:
        "200":
          description: updateCodeSystemVersion 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Terminology
      operationId: deleteCodeSystemVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteCodeSystemVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}/activate:
    post:
      tags:
      - Terminology
      operationId: activateCodeSystemVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: activateCodeSystemVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}/concepts/export:
    get:
      tags:
      - Terminology
      operationId: exportConcepts
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: exportConcepts 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LorqueProcess"
  /api/ts/code-systems/{codeSystem}/versions/{version}/concepts/link:
    post:
      tags:
      - Terminology
      operationId: linkEntityVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemController.CodeSystemEntityVersionLinkRequest"
        required: true
      responses:
        "200":
          description: linkEntityVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}/concepts/transaction:
    post:
      tags:
      - Terminology
      operationId: saveConceptTransaction_1
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConceptTransactionRequest"
        required: true
      responses:
        "200":
          description: saveConceptTransaction_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}/concepts/unlink:
    post:
      tags:
      - Terminology
      operationId: unlinkEntityVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemController.CodeSystemEntityVersionLinkRequest"
        required: true
      responses:
        "200":
          description: unlinkEntityVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}/concepts/{code}:
    get:
      tags:
      - Terminology
      operationId: getConcept_1
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getConcept_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Concept"
  /api/ts/code-systems/{codeSystem}/versions/{version}/draft:
    post:
      tags:
      - Terminology
      operationId: saveAsDraftCodeSystemVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: saveAsDraftCodeSystemVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}/duplicate:
    post:
      tags:
      - Terminology
      operationId: duplicateCodeSystemVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemController.CodeSystemVersionDuplicateRequest"
        required: true
      responses:
        "200":
          description: duplicateCodeSystemVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}/entity-property-concept-summary:
    get:
      tags:
      - Terminology
      operationId: getConceptSummary_1
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: entityPropertyId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: entityPropertyValues
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: getConceptSummary_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSystemEntityPropertyConceptSummary"
  /api/ts/code-systems/{codeSystem}/versions/{version}/entity-property-summary:
    get:
      tags:
      - Terminology
      operationId: getSummary_1
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: entityPropertyValues
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: getSummary_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeSystemEntityPropertySummary"
  /api/ts/code-systems/{codeSystem}/versions/{version}/entity-versions/activate:
    post:
      tags:
      - Terminology
      operationId: activateEntityVersions
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: activateEntityVersions 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}/entity-versions/supplement:
    post:
      tags:
      - Terminology
      operationId: supplementEntityVersion_1
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeSystemSupplementRequest"
        required: true
      responses:
        "200":
          description: supplementEntityVersion_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/code-systems/{codeSystem}/versions/{version}/retire:
    post:
      tags:
      - Terminology
      operationId: retireCodeSystemVersion
      parameters:
      - name: codeSystem
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: retireCodeSystemVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/defined-properties:
    get:
      tags:
      - Terminology
      operationId: query_2
      responses:
        "200":
          description: query_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_DefinedProperty_"
    post:
      tags:
      - Terminology
      operationId: create_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefinedProperty"
        required: true
      responses:
        "200":
          description: create_4 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/defined-properties/{id}:
    get:
      tags:
      - Terminology
      operationId: load_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: load_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefinedProperty"
    put:
      tags:
      - Terminology
      operationId: update_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefinedProperty"
        required: true
      responses:
        "200":
          description: update_4 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/defined-properties/{id}/update-related:
    post:
      tags:
      - Terminology
      operationId: updateRelated
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: updateRelated 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets:
    get:
      tags:
      - Terminology
      operationId: queryMapSets
      responses:
        "200":
          description: queryMapSets 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_MapSet_"
  /api/ts/map-sets/transaction:
    post:
      tags:
      - Terminology
      operationId: saveMapSetTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MapSetTransactionRequest"
        required: true
      responses:
        "200":
          description: saveMapSetTransaction 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}:
    get:
      tags:
      - Terminology
      operationId: getMapSet
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: decorate
        in: query
        schema:
          type: boolean
          nullable: true
      responses:
        "200":
          description: getMapSet 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapSet"
    delete:
      tags:
      - Terminology
      operationId: deleteMapSet
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteMapSet 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/associations:
    get:
      tags:
      - Terminology
      operationId: queryAssociations
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryAssociations 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_MapSetAssociation_"
  /api/ts/map-sets/{mapSet}/change-id:
    post:
      tags:
      - Terminology
      operationId: changeMapSetId
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: changeMapSetId 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/provenances:
    get:
      tags:
      - Terminology
      operationId: queryProvenances_3
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: queryProvenances_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Provenance"
  /api/ts/map-sets/{mapSet}/versions:
    get:
      tags:
      - Terminology
      operationId: queryMapSetVersions
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryMapSetVersions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_MapSetVersion_"
    post:
      tags:
      - Terminology
      operationId: createVersion_1
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MapSetVersion"
        required: true
      responses:
        "200":
          description: createVersion_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/versions/{version}:
    get:
      tags:
      - Terminology
      operationId: getMapSetVersion
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getMapSetVersion 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapSetVersion"
    put:
      tags:
      - Terminology
      operationId: updateVersion_1
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MapSetVersion"
        required: true
      responses:
        "200":
          description: updateVersion_1 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Terminology
      operationId: deleteMapSetVersion
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteMapSetVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/versions/{version}/activate:
    post:
      tags:
      - Terminology
      operationId: activateVersion_1
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: activateVersion_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/versions/{version}/associations:
    post:
      tags:
      - Terminology
      operationId: createAssociation
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MapSetAssociation"
        required: true
      responses:
        "200":
          description: createAssociation 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/versions/{version}/associations-batch:
    post:
      tags:
      - Terminology
      operationId: saveAssociations
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: "#/components/schemas/MapSetAssociation"
        required: true
      responses:
        "200":
          description: saveAssociations 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/versions/{version}/associations/automap:
    post:
      tags:
      - Terminology
      operationId: automapAssociations
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MapSetAutomapRequest"
        required: true
      responses:
        "200":
          description: automapAssociations 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/ts/map-sets/{mapSet}/versions/{version}/associations/unmap:
    post:
      tags:
      - Terminology
      operationId: unmapAssociations
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: array
                items:
                  type: integer
                  format: int64
        required: true
      responses:
        "200":
          description: unmapAssociations 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/versions/{version}/associations/verify:
    post:
      tags:
      - Terminology
      operationId: verifyAssociations
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: array
                items:
                  type: integer
                  format: int64
        required: true
      responses:
        "200":
          description: verifyAssociations 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/versions/{version}/associations/{id}:
    put:
      tags:
      - Terminology
      operationId: updateAssociation
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MapSetAssociation"
        required: true
      responses:
        "200":
          description: updateAssociation 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/versions/{version}/concepts:
    get:
      tags:
      - Terminology
      operationId: queryMapSetConcepts
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryMapSetConcepts 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_MapSetConcept_"
  /api/ts/map-sets/{mapSet}/versions/{version}/draft:
    post:
      tags:
      - Terminology
      operationId: saveAsDraftMapSetVersion
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: saveAsDraftMapSetVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/map-sets/{mapSet}/versions/{version}/reload-statistics-async:
    post:
      tags:
      - Terminology
      operationId: reloadStatisticsAsync
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: reloadStatisticsAsync 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/ts/map-sets/{mapSet}/versions/{version}/retire:
    post:
      tags:
      - Terminology
      operationId: retireVersion_1
      parameters:
      - name: mapSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: retireVersion_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/measurement-units:
    get:
      tags:
      - UCUM
      operationId: query_3
      responses:
        "200":
          description: query_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_MeasurementUnit_"
    post:
      tags:
      - UCUM
      operationId: save_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeasurementUnit"
        required: true
      responses:
        "200":
          description: save_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeasurementUnit"
  /api/ts/measurement-units/convert:
    get:
      tags:
      - UCUM
      operationId: convert
      parameters:
      - name: value
        in: query
        required: true
        schema:
          type: number
      - name: from
        in: query
        required: true
        schema:
          type: string
      - name: to
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: convert 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/ts/measurement-units/kinds:
    get:
      tags:
      - UCUM
      operationId: loadKinds
      responses:
        "200":
          description: loadKinds 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/ts/measurement-units/{id}:
    get:
      tags:
      - UCUM
      operationId: load_5
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: load_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeasurementUnit"
    put:
      tags:
      - UCUM
      operationId: update_5
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeasurementUnit"
        required: true
      responses:
        "200":
          description: update_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeasurementUnit"
  /api/ts/naming-systems:
    get:
      tags:
      - Terminology
      operationId: queryNamingSystems
      responses:
        "200":
          description: queryNamingSystems 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_NamingSystem_"
    post:
      tags:
      - Terminology
      operationId: saveNamingSystem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NamingSystem"
        required: true
      responses:
        "200":
          description: saveNamingSystem 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/naming-systems/{namingSystem}:
    get:
      tags:
      - Terminology
      operationId: getNamingSystem
      parameters:
      - name: namingSystem
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getNamingSystem 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamingSystem"
    delete:
      tags:
      - Terminology
      operationId: deleteNamingSystem
      parameters:
      - name: namingSystem
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteNamingSystem 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/naming-systems/{namingSystem}/activate:
    post:
      tags:
      - Terminology
      operationId: activateNamingSystem
      parameters:
      - name: namingSystem
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: activateNamingSystem 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/naming-systems/{namingSystem}/retire:
    post:
      tags:
      - Terminology
      operationId: retireNamingSystem
      parameters:
      - name: namingSystem
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: retireNamingSystem 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets:
    get:
      tags:
      - Terminology
      operationId: queryValueSets
      responses:
        "200":
          description: queryValueSets 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_ValueSet_"
  /api/ts/value-sets/expand:
    post:
      tags:
      - Terminology
      operationId: expand
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetExpandRequest"
        required: true
      responses:
        "200":
          description: expand 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValueSetVersionConcept"
  /api/ts/value-sets/expand-async:
    post:
      tags:
      - Terminology
      operationId: expandAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetExpandRequest"
        required: true
      responses:
        "200":
          description: expandAsync 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobLogResponse"
  /api/ts/value-sets/expansion-export-csv/result/{lorqueProcessId}:
    get:
      tags:
      - Terminology
      operationId: getConceptExportCSV_1
      parameters:
      - name: lorqueProcessId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getConceptExportCSV_1 200 response
          content:
            application/csv:
              schema:
                type: object
  /api/ts/value-sets/expansion-export-xlsx/result/{lorqueProcessId}:
    get:
      tags:
      - Terminology
      operationId: getConceptExportXLSX_1
      parameters:
      - name: lorqueProcessId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getConceptExportXLSX_1 200 response
          content:
            application/vnd.ms-excel:
              schema:
                type: object
  /api/ts/value-sets/transaction:
    post:
      tags:
      - Terminology
      operationId: saveValueSetTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetTransactionRequest"
        required: true
      responses:
        "200":
          description: saveValueSetTransaction 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}:
    get:
      tags:
      - Terminology
      operationId: getValueSet
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: decorate
        in: query
        schema:
          type: boolean
          nullable: true
      responses:
        "200":
          description: getValueSet 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValueSet"
    delete:
      tags:
      - Terminology
      operationId: deleteValueSet
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteValueSet 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/change-id:
    post:
      tags:
      - Terminology
      operationId: changeValueSetId
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: changeValueSetId 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/provenances:
    get:
      tags:
      - Terminology
      operationId: queryProvenances_4
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: queryProvenances_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Provenance"
  /api/ts/value-sets/{valueSet}/versions:
    get:
      tags:
      - Terminology
      operationId: queryValueSetVersions
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: queryValueSetVersions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult_ValueSetVersion_"
    post:
      tags:
      - Terminology
      operationId: createVersion_2
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetVersion"
        required: true
      responses:
        "200":
          description: createVersion_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/versions/{version}:
    get:
      tags:
      - Terminology
      operationId: getValueSetVersion
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getValueSetVersion 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValueSetVersion"
    put:
      tags:
      - Terminology
      operationId: updateVersion_2
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetVersion"
        required: true
      responses:
        "200":
          description: updateVersion_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/versions/{version}/activate:
    post:
      tags:
      - Terminology
      operationId: activateVersion_2
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: activateVersion_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/versions/{version}/draft:
    post:
      tags:
      - Terminology
      operationId: saveAsDraft
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: saveAsDraft 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/versions/{version}/duplicate:
    post:
      tags:
      - Terminology
      operationId: duplicateValueSetVersion
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetController.ValueSetVersionDuplicateRequest"
        required: true
      responses:
        "200":
          description: duplicateValueSetVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/versions/{version}/expansion-export:
    get:
      tags:
      - Terminology
      operationId: exportConcepts_1
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: exportConcepts_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LorqueProcess"
  /api/ts/value-sets/{valueSet}/versions/{version}/retire:
    post:
      tags:
      - Terminology
      operationId: retireVersion_2
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: retireVersion_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/versions/{version}/rule-sets/{id}:
    put:
      tags:
      - Terminology
      operationId: updateRuleSet
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetVersionRuleSet"
        required: true
      responses:
        "200":
          description: updateRuleSet 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/versions/{version}/rules:
    post:
      tags:
      - Terminology
      operationId: createRule
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetVersionRuleSet.ValueSetVersionRule"
        required: true
      responses:
        "200":
          description: createRule 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueSet}/versions/{version}/rules/{id}:
    put:
      tags:
      - Terminology
      operationId: updateRule
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetVersionRuleSet.ValueSetVersionRule"
        required: true
      responses:
        "200":
          description: updateRule 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Terminology
      operationId: deleteRule
      parameters:
      - name: valueSet
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: deleteRule 200 response
          content:
            application/json:
              schema:
                type: object
  /api/ts/value-sets/{valueset}/versions/{version}:
    delete:
      tags:
      - Terminology
      operationId: deleteValueSetVersion
      parameters:
      - name: valueset
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteValueSetVersion 200 response
          content:
            application/json:
              schema:
                type: object
  /api/wiki-spaces:
    get:
      tags:
      - Wiki
      operationId: listSpaces
      responses:
        "200":
          description: listSpaces 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WikiSpaceController.WikiSpace"
components:
  schemas:
    AssociationType:
      required:
      - associationKind
      - code
      - directed
      type: object
      properties:
        code:
          type: string
        associationKind:
          type: string
        forwardName:
          type: string
        reverseName:
          type: string
        directed:
          type: boolean
        description:
          type: string
    CodeName:
      required:
      - code
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        names:
          type: object
          additionalProperties: true
    CodeSystem:
      type: object
      properties:
        id:
          type: string
        uri:
          type: string
        publisher:
          type: string
        name:
          type: string
        otherTitle:
          type: array
          items:
            $ref: "#/components/schemas/OtherTitle"
        title:
          type: object
          additionalProperties: true
        description:
          type: object
          additionalProperties: true
        purpose:
          type: object
          additionalProperties: true
        topic:
          $ref: "#/components/schemas/Topic"
        useContext:
          type: array
          items:
            $ref: "#/components/schemas/UseContext"
        narrative:
          type: string
        experimental:
          type: boolean
        sourceReference:
          type: string
        replaces:
          type: string
        externalWebSource:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        configurationAttributes:
          type: array
          items:
            $ref: "#/components/schemas/ConfigurationAttribute"
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/ContactDetail"
        copyright:
          $ref: "#/components/schemas/Copyright"
        permissions:
          $ref: "#/components/schemas/Permissions"
        hierarchyMeaning:
          type: string
        content:
          type: string
        caseSensitive:
          type: string
        sequence:
          type: string
        baseCodeSystem:
          type: string
        baseCodeSystemUri:
          type: string
        settings:
          $ref: "#/components/schemas/CodeSystem.CodeSystemSettings"
        valueSet:
          type: string
        concepts:
          type: array
          items:
            $ref: "#/components/schemas/Concept"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/EntityProperty"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemVersion"
    CodeSystem.CodeSystemSettings:
      type: object
      properties:
        reviewRequired:
          type: boolean
        approvalRequired:
          type: boolean
        disableHierarchyGrouping:
          type: boolean
    CodeSystemAssociation:
      type: object
      allOf:
      - $ref: "#/components/schemas/CodeSystemEntity"
      - properties:
          associationType:
            type: string
          status:
            type: string
          targetId:
            type: integer
            format: int64
          sourceId:
            type: integer
            format: int64
          orderNumber:
            type: integer
            format: int32
          sourceCode:
            type: string
          targetCode:
            type: string
          supplement:
            type: boolean
    CodeSystemCircularDependenciesDetectorResult:
      type: object
    CodeSystemCompareResult:
      type: object
      properties:
        added:
          type: array
          items:
            type: string
        deleted:
          type: array
          items:
            type: string
        changed:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemCompareResult.CodeSystemCompareResultChange"
    CodeSystemCompareResult.CodeSystemCompareResultChange:
      type: object
      properties:
        code:
          type: string
        diff:
          $ref: "#/components/schemas/CodeSystemCompareResult.CodeSystemCompareResultDiff"
    CodeSystemCompareResult.CodeSystemCompareResultDiff:
      type: object
      properties:
        old:
          $ref: "#/components/schemas/CodeSystemCompareResult.CodeSystemCompareResultDiffItem"
        mew:
          $ref: "#/components/schemas/CodeSystemCompareResult.CodeSystemCompareResultDiffItem"
    CodeSystemCompareResult.CodeSystemCompareResultDiffItem:
      type: object
      properties:
        status:
          type: string
        description:
          type: string
        designations:
          type: array
          items:
            type: string
        properties:
          type: array
          items:
            type: string
    CodeSystemController.CodeSystemConceptPropertyPropagationRequest:
      type: object
      properties:
        targetConceptIds:
          type: array
          items:
            type: integer
            format: int64
    CodeSystemController.CodeSystemDuplicateRequest:
      type: object
      properties:
        codeSystem:
          type: string
        codeSystemUri:
          type: string
    CodeSystemController.CodeSystemEntityVersionLinkRequest:
      type: object
      properties:
        entityVersionIds:
          type: array
          items:
            type: integer
            format: int64
    CodeSystemController.CodeSystemVersionDuplicateRequest:
      type: object
      properties:
        codeSystem:
          type: string
        version:
          type: string
    CodeSystemEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        codeSystem:
          type: string
        versions:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemEntityVersion"
    CodeSystemEntityPropertyConceptSummary:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemEntityPropertyConceptSummary.CodeSystemEntityPropertyConceptSummaryItem"
    CodeSystemEntityPropertyConceptSummary.CodeSystemEntityPropertyConceptSummaryItem:
      type: object
      properties:
        propertyCode:
          type: string
        conceptCnt:
          type: integer
          format: int32
        conceptIds:
          type: array
          items:
            type: integer
            format: int64
    CodeSystemEntityPropertySummary:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemEntityPropertySummary.CodeSystemEntityPropertySummaryItem"
    CodeSystemEntityPropertySummary.CodeSystemEntityPropertySummaryItem:
      type: object
      properties:
        propertyId:
          type: integer
          format: int64
        propertyName:
          type: string
        conceptCnt:
          type: integer
          format: int32
        propCnt:
          type: integer
          format: int32
        propList:
          type: array
          items:
            type: object
    CodeSystemEntityVersion:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        codeSystem:
          type: string
        codeSystemBase:
          type: string
        description:
          type: string
        status:
          type: string
        created:
          type: string
          format: date-time
        propertyValues:
          type: array
          items:
            $ref: "#/components/schemas/EntityPropertyValue"
        designations:
          type: array
          items:
            $ref: "#/components/schemas/Designation"
        associations:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemAssociation"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemVersionReference"
        codeSystemEntityId:
          type: integer
          format: int64
        baseEntityVersionId:
          type: integer
          format: int64
        sysModifiedBy:
          type: string
        sysModifiedAt:
          type: string
          format: date-time
    CodeSystemImportConfiguration:
      type: object
      properties:
        uri:
          type: string
        publisher:
          type: string
        version:
          type: string
        validFrom:
          type: string
          format: date
        validTo:
          type: string
          format: date
        codeSystem:
          type: string
        baseCodeSystem:
          type: string
        codeSystemName:
          type: object
          additionalProperties: true
        codeSystemDescription:
          type: object
          additionalProperties: true
        codeSystemVersionDescription:
          type: object
          additionalProperties: true
        status:
          type: string
        sourceUrl:
          type: string
        generateValueSet:
          type: boolean
        cleanRun:
          type: boolean
        cleanConceptRun:
          type: boolean
    CodeSystemSupplementRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: integer
            format: int64
        externalSystemCode:
          type: string
        codeSystem:
          type: string
        codeSystemUri:
          type: string
    CodeSystemTransactionRequest:
      type: object
      properties:
        codeSystem:
          $ref: "#/components/schemas/CodeSystem"
        version:
          $ref: "#/components/schemas/CodeSystemVersion"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/EntityProperty"
        valueSet:
          $ref: "#/components/schemas/ValueSetTransactionRequest"
    CodeSystemUniquenessValidatorRequest:
      type: object
      properties:
        codeSystem:
          type: string
        versionId:
          type: integer
          format: int64
        designations:
          type: boolean
        properties:
          type: boolean
        ignoreEmptyProperties:
          type: boolean
    CodeSystemVersion:
      type: object
      allOf:
      - $ref: "#/components/schemas/CodeSystemVersionReference"
      - properties:
          codeSystem:
            type: string
          supportedLanguages:
            type: array
            items:
              type: string
          description:
            type: object
            additionalProperties: true
          algorithm:
            type: string
          releaseDate:
            type: string
            format: date
          expirationDate:
            type: string
            format: date
          created:
            type: string
            format: date-time
          identifiers:
            type: array
            items:
              $ref: "#/components/schemas/Identifier"
          baseCodeSystem:
            type: string
          baseCodeSystemUri:
            type: string
          valueSet:
            $ref: "#/components/schemas/ValueSetVersionReference"
          conceptsTotal:
            type: integer
            format: int32
          entities:
            type: array
            items:
              $ref: "#/components/schemas/CodeSystemEntityVersion"
    CodeSystemVersionReference:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: string
        uri:
          type: string
        status:
          type: string
        preferredLanguage:
          type: string
        releaseDate:
          type: string
          format: date
        baseCodeSystemVersion:
          $ref: "#/components/schemas/CodeSystemVersionReference"
    Concept:
      type: object
      allOf:
      - $ref: "#/components/schemas/CodeSystemEntity"
      - properties:
          code:
            type: string
          description:
            type: string
          leaf:
            type: boolean
          childCount:
            type: integer
            format: int64
          immutable:
            type: boolean
    ConceptTransactionRequest:
      type: object
      properties:
        codeSystem:
          type: string
        codeSystemVersion:
          type: string
        concept:
          $ref: "#/components/schemas/Concept"
        entityVersion:
          $ref: "#/components/schemas/CodeSystemEntityVersion"
    ConfigurationAttribute:
      type: object
      properties:
        attribute:
          type: string
        value:
          type: string
        language:
          type: string
    ContactDetail:
      type: object
      properties:
        name:
          type: string
        telecoms:
          type: array
          items:
            $ref: "#/components/schemas/ContactDetail.Telecom"
    ContactDetail.Telecom:
      type: object
      properties:
        system:
          type: string
        value:
          type: string
        use:
          type: string
    Copyright:
      type: object
      properties:
        holder:
          type: string
        jurisdiction:
          type: string
        statement:
          type: string
    DefinedProperty:
      type: object
      allOf:
      - $ref: "#/components/schemas/PropertyReference"
      - properties:
          rule:
            $ref: "#/components/schemas/EntityPropertyRule"
          description:
            type: object
            additionalProperties: true
          used:
            type: boolean
    Designation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        designationTypeId:
          type: integer
          format: int64
        name:
          type: string
        language:
          type: string
        rendering:
          type: string
        preferred:
          type: boolean
        caseSignificance:
          type: string
        designationKind:
          type: string
        description:
          type: string
        status:
          type: string
        codeSystemEntityVersionId:
          type: integer
          format: int64
        designationType:
          type: string
        supplement:
          type: boolean
    EntityProperty:
      type: object
      allOf:
      - $ref: "#/components/schemas/PropertyReference"
      - properties:
          rule:
            $ref: "#/components/schemas/EntityPropertyRule"
          description:
            type: object
            additionalProperties: true
          status:
            type: string
          orderNumber:
            type: integer
            format: int32
          preferred:
            type: boolean
          required:
            type: boolean
          showInList:
            type: boolean
          created:
            type: string
            format: date-time
          codeSystem:
            type: string
          definedEntityPropertyId:
            type: integer
            format: int64
    EntityPropertyRule:
      type: object
      properties:
        codeSystems:
          type: array
          items:
            type: string
        valueSet:
          type: string
        filters:
          type: array
          items:
            $ref: "#/components/schemas/EntityPropertyRule.EntityPropertyRuleFilter"
    EntityPropertyRule.EntityPropertyRuleFilter:
      type: object
      properties:
        type:
          type: string
        association:
          type: string
        property:
          $ref: "#/components/schemas/EntityProperty"
        operator:
          type: string
        value:
          type: string
    EntityPropertyValue:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value: {}
        entityPropertyId:
          type: integer
          format: int64
        codeSystemEntityVersionId:
          type: integer
          format: int64
        entityProperty:
          type: string
        entityPropertyType:
          type: string
        supplement:
          type: boolean
    FileAnalysisResponse:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/FileAnalysisResponse.FileAnalysisColumn"
    FileAnalysisResponse.FileAnalysisColumn:
      type: object
      properties:
        columnName:
          type: string
        columnType:
          type: string
        columnTypeFormat:
          type: string
        hasValues:
          type: boolean
    GithubService.GithubDiff:
      type: object
      properties:
        left:
          type: string
        right:
          type: string
    GithubService.GithubStatus:
      type: object
      properties:
        sha:
          type: string
        files:
          type: object
          additionalProperties:
            type: string
    HealthCheckType:
      type: string
      enum:
      - LIVENESS
      - READINESS
    HealthResult:
      type: object
      properties:
        name:
          type: string
        status:
          $ref: "#/components/schemas/HealthStatus"
        details: {}
    HealthStatus:
      required:
      - description
      - name
      - operational
      - severity
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        operational:
          type: boolean
          nullable: true
        severity:
          type: integer
          format: int32
          nullable: true
    Identifier:
      type: object
      properties:
        system:
          type: string
        value:
          type: string
    ImplementationGuide:
      type: object
      properties:
        id:
          type: string
        uri:
          type: string
        publisher:
          type: string
        name:
          type: string
        title:
          type: object
          additionalProperties: true
        description:
          type: object
          additionalProperties: true
        purpose:
          type: object
          additionalProperties: true
        licence:
          type: string
        experimental:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/ContactDetail"
        copyright:
          $ref: "#/components/schemas/Copyright"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/ImplementationGuideVersion"
    ImplementationGuideGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: object
          additionalProperties: true
    ImplementationGuidePage:
      type: object
      properties:
        id:
          type: integer
          format: int64
        space:
          $ref: "#/components/schemas/CodeName"
        page:
          type: string
        name:
          type: string
        type:
          type: string
        group:
          $ref: "#/components/schemas/ImplementationGuideGroup"
    ImplementationGuideResource:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        reference:
          type: string
        version:
          type: string
        name:
          type: string
        group:
          $ref: "#/components/schemas/ImplementationGuideGroup"
    ImplementationGuideTransactionRequest:
      type: object
      properties:
        implementationGuide:
          $ref: "#/components/schemas/ImplementationGuide"
        version:
          $ref: "#/components/schemas/ImplementationGuideVersion"
    ImplementationGuideVersion:
      type: object
      properties:
        id:
          type: integer
          format: int64
        implementationGuide:
          type: string
        version:
          type: string
        status:
          type: string
        packageId:
          type: string
        fhirVersion:
          type: string
        github:
          $ref: "#/components/schemas/ImplementationGuideVersion.ImplementationGuideVersionGithub"
        template:
          type: string
        algorithm:
          type: string
        date:
          type: string
          format: date-time
        dependsOn:
          type: array
          items:
            $ref: "#/components/schemas/ImplementationGuideVersion.ImplementationGuideVersionDependsOn"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/ImplementationGuideGroup"
    ImplementationGuideVersion.ImplementationGuideVersionDependsOn:
      type: object
      properties:
        packageId:
          type: string
        version:
          type: string
        reason:
          type: string
    ImplementationGuideVersion.ImplementationGuideVersionGithub:
      type: object
      properties:
        repo:
          type: string
        branch:
          type: string
        init:
          type: string
    JobLogResponse:
      type: object
      properties:
        jobId:
          type: integer
          format: int64
    LocalDateRange:
      $ref: "#/components/schemas/Range_LocalDate_"
    LorqueProcess:
      type: object
      properties:
        id:
          type: integer
          format: int64
        initiator:
          type: string
        processName:
          type: string
        status:
          type: string
        started:
          type: string
          format: date-time
        finished:
          type: string
          format: date-time
        result:
          type: array
          items:
            type: string
            format: byte
        resultText:
          type: string
        resultType:
          type: string
    MapSet:
      type: object
      properties:
        id:
          type: string
        uri:
          type: string
        publisher:
          type: string
        name:
          type: string
        otherTitle:
          type: array
          items:
            $ref: "#/components/schemas/OtherTitle"
        title:
          type: object
          additionalProperties: true
        description:
          type: object
          additionalProperties: true
        purpose:
          type: object
          additionalProperties: true
        topic:
          $ref: "#/components/schemas/Topic"
        useContext:
          type: array
          items:
            $ref: "#/components/schemas/UseContext"
        narrative:
          type: string
        experimental:
          type: boolean
        sourceReference:
          type: string
        replaces:
          type: string
        externalWebSource:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        configurationAttributes:
          type: array
          items:
            $ref: "#/components/schemas/ConfigurationAttribute"
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/ContactDetail"
        copyright:
          $ref: "#/components/schemas/Copyright"
        settings:
          $ref: "#/components/schemas/MapSet.MapSetSettings"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/MapSetVersion"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/MapSetProperty"
    MapSet.MapSetSettings:
      type: object
      properties:
        reviewRequired:
          type: boolean
        approvalRequired:
          type: boolean
    MapSetAssociation:
      type: object
      properties:
        uniqueKey:
          type: string
        id:
          type: integer
          format: int64
        mapSet:
          type: string
        mapSetVersion:
          $ref: "#/components/schemas/MapSetVersionReference"
        source:
          $ref: "#/components/schemas/MapSetAssociation.MapSetAssociationEntity"
        target:
          $ref: "#/components/schemas/MapSetAssociation.MapSetAssociationEntity"
        relationship:
          type: string
        verified:
          type: boolean
        noMap:
          type: boolean
        propertyValues:
          type: array
          items:
            $ref: "#/components/schemas/MapSetPropertyValue"
    MapSetAssociation.MapSetAssociationEntity:
      type: object
      properties:
        code:
          type: string
        codeSystem:
          type: string
        display:
          type: string
        codeSystemUri:
          type: string
    MapSetAutomapRequest:
      type: object
      properties:
        mapByCode:
          type: boolean
        mapByDesignation:
          type: boolean
        sourceProperty:
          type: string
        sourceLanguage:
          type: string
        targetProperty:
          type: string
        targetLanguage:
          type: string
    MapSetConcept:
      type: object
      properties:
        code:
          type: string
        codeSystem:
          type: string
        display:
          $ref: "#/components/schemas/Designation"
        designations:
          type: array
          items:
            $ref: "#/components/schemas/Designation"
        associations:
          type: array
          items:
            $ref: "#/components/schemas/MapSetAssociation"
    MapSetProperty:
      type: object
      allOf:
      - $ref: "#/components/schemas/PropertyReference"
      - properties:
          rule:
            $ref: "#/components/schemas/EntityPropertyRule"
          status:
            type: string
          description:
            type: object
            additionalProperties: true
          orderNumber:
            type: integer
            format: int32
          required:
            type: boolean
          created:
            type: string
            format: date-time
          mapSet:
            type: string
          definedEntityPropertyId:
            type: integer
            format: int64
    MapSetPropertyValue:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value: {}
        mapSetPropertyId:
          type: integer
          format: int64
        mapSetAssociationId:
          type: integer
          format: int64
        mapSetPropertyName:
          type: string
        mapSetPropertyType:
          type: string
    MapSetTransactionRequest:
      type: object
      properties:
        mapSet:
          $ref: "#/components/schemas/MapSet"
        version:
          $ref: "#/components/schemas/MapSetVersion"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/MapSetProperty"
        associations:
          type: array
          items:
            $ref: "#/components/schemas/MapSetAssociation"
    MapSetVersion:
      type: object
      allOf:
      - $ref: "#/components/schemas/MapSetVersionReference"
      - properties:
          mapSet:
            type: string
          preferredLanguage:
            type: string
          description:
            type: object
            additionalProperties: true
          algorithm:
            type: string
          releaseDate:
            type: string
            format: date
          expirationDate:
            type: string
            format: date
          created:
            type: string
            format: date-time
          identifiers:
            type: array
            items:
              $ref: "#/components/schemas/Identifier"
          scope:
            $ref: "#/components/schemas/MapSetVersion.MapSetVersionScope"
          statistics:
            $ref: "#/components/schemas/MapSetVersion.MapSetVersionStatistics"
          associations:
            type: array
            items:
              $ref: "#/components/schemas/MapSetAssociation"
    MapSetVersion.MapSetResourceReference:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        uri:
          type: string
    MapSetVersion.MapSetVersionScope:
      type: object
      properties:
        sourceType:
          type: string
        sourceValueSet:
          $ref: "#/components/schemas/MapSetVersion.MapSetResourceReference"
        sourceCodeSystems:
          type: array
          items:
            $ref: "#/components/schemas/MapSetVersion.MapSetResourceReference"
        targetType:
          type: string
        targetValueSet:
          $ref: "#/components/schemas/MapSetVersion.MapSetResourceReference"
        targetCodeSystems:
          type: array
          items:
            $ref: "#/components/schemas/MapSetVersion.MapSetResourceReference"
    MapSetVersion.MapSetVersionStatistics:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        sourceConcepts:
          type: integer
          format: int32
        equivalent:
          type: integer
          format: int32
        noMap:
          type: integer
          format: int32
        narrower:
          type: integer
          format: int32
        broader:
          type: integer
          format: int32
        unmapped:
          type: integer
          format: int32
        inactiveSources:
          type: integer
          format: int32
        inactiveTargets:
          type: integer
          format: int32
        mapSet:
          type: string
        mapSetVersion:
          $ref: "#/components/schemas/MapSetVersionReference"
    MapSetVersionReference:
      type: object
      properties:
        id:
          type: integer
          format: int64
        version:
          type: string
        status:
          type: string
    MeasurementUnit:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        names:
          type: object
          additionalProperties: true
        alias:
          type: object
          additionalProperties: true
        period:
          $ref: "#/components/schemas/LocalDateRange"
        ordering:
          type: integer
          format: int32
        rounding:
          type: number
        kind:
          type: string
        definitionUnit:
          type: string
        definitionValue:
          type: string
        mappings:
          type: array
          items:
            $ref: "#/components/schemas/MeasurementUnitMapping"
    MeasurementUnitMapping:
      type: object
      properties:
        system:
          type: string
        systemUnit:
          type: string
        systemValue:
          type: string
    NamingSystem:
      type: object
      properties:
        id:
          type: string
        names:
          type: object
          additionalProperties: true
        kind:
          type: string
        codeSystem:
          type: string
        source:
          type: string
        description:
          type: string
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/NamingSystemIdentifier"
        status:
          type: string
        created:
          type: string
          format: date-time
    NamingSystemIdentifier:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        preferred:
          type: boolean
    ObservationDefinition:
      type: object
      allOf:
      - $ref: "#/components/schemas/CodeName"
      - properties:
          id:
            type: integer
            format: int64
          code:
            type: string
          version:
            type: string
          publisher:
            type: string
          url:
            type: string
          status:
            type: string
          names:
            type: object
            additionalProperties: true
          alias:
            type: object
            additionalProperties: true
          definition:
            type: object
            additionalProperties: true
          keywords:
            type: object
            additionalProperties: true
          category:
            type: array
            items:
              $ref: "#/components/schemas/ObservationDefinition.ObservationDefinitionCategory"
          timePrecision:
            type: string
          structure:
            type: array
            items:
              type: string
          value:
            $ref: "#/components/schemas/ObservationDefinitionValue"
          members:
            type: array
            items:
              $ref: "#/components/schemas/ObservationDefinitionMember"
          components:
            type: array
            items:
              $ref: "#/components/schemas/ObservationDefinitionComponent"
          protocol:
            $ref: "#/components/schemas/ObservationDefinitionProtocol"
          state:
            type: array
            items:
              $ref: "#/components/schemas/ObservationDefinitionComponent"
          interpretations:
            type: array
            items:
              $ref: "#/components/schemas/ObservationDefinitionInterpretation"
          mappings:
            type: array
            items:
              $ref: "#/components/schemas/ObservationDefinitionMapping"
    ObservationDefinition.ObservationDefinitionCategory:
      type: object
      properties:
        codeSystem:
          type: string
        code:
          type: string
    ObservationDefinitionCardinality:
      type: object
      properties:
        min:
          type: number
        max:
          type: number
    ObservationDefinitionComponent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sectionType:
          type: string
        code:
          type: string
        names:
          type: object
          additionalProperties: true
        orderNumber:
          type: integer
          format: int32
        cardinality:
          $ref: "#/components/schemas/ObservationDefinitionCardinality"
        type:
          type: string
        unit:
          $ref: "#/components/schemas/ObservationDefinitionUnit"
        valueSet:
          type: string
    ObservationDefinitionImportRequest:
      type: object
      properties:
        loincCodes:
          type: array
          items:
            type: string
    ObservationDefinitionInterpretation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        target:
          $ref: "#/components/schemas/ObservationDefinitionInterpretation.ObservationDefinitionInterpretationTarget"
        orderNumber:
          type: integer
          format: int32
        state:
          $ref: "#/components/schemas/ObservationDefinitionInterpretation.ObservationDefinitionInterpretationState"
        range:
          $ref: "#/components/schemas/ObservationDefinitionInterpretation.ObservationDefinitionInterpretationRange"
        condition:
          type: string
        rangeCategory:
          type: string
        fhirInterpretationCode:
          type: string
        snomedInterpretationCode:
          type: string
    ObservationDefinitionInterpretation.ObservationDefinitionInterpretationRange:
      type: object
      properties:
        numericRange:
          $ref: "#/components/schemas/ObservationDefinitionCardinality"
        codeSystem:
          type: string
        codeSystemConcepts:
          type: array
          items:
            type: string
        valueSet:
          type: string
    ObservationDefinitionInterpretation.ObservationDefinitionInterpretationState:
      type: object
      properties:
        gender:
          type: string
        age:
          $ref: "#/components/schemas/ObservationDefinitionCardinality"
        gestationAge:
          $ref: "#/components/schemas/ObservationDefinitionCardinality"
    ObservationDefinitionInterpretation.ObservationDefinitionInterpretationTarget:
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
          format: int64
    ObservationDefinitionMapping:
      type: object
      properties:
        id:
          type: integer
          format: int64
        target:
          $ref: "#/components/schemas/ObservationDefinitionMapping.ObservationDefinitionMappingTarget"
        orderNumber:
          type: integer
          format: int32
        mapSet:
          type: string
        codeSystem:
          type: string
        concept:
          type: string
        relation:
          type: string
        condition:
          type: string
    ObservationDefinitionMapping.ObservationDefinitionMappingTarget:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
    ObservationDefinitionMember:
      type: object
      properties:
        id:
          type: integer
          format: int64
        item:
          $ref: "#/components/schemas/CodeName"
        names:
          type: object
          additionalProperties: true
        orderNumber:
          type: integer
          format: int32
        cardinality:
          $ref: "#/components/schemas/ObservationDefinitionCardinality"
    ObservationDefinitionProtocol:
      type: object
      properties:
        id:
          type: integer
          format: int64
        device:
          $ref: "#/components/schemas/ObservationDefinitionProtocol.ObservationDefinitionProtocolValue"
        method:
          $ref: "#/components/schemas/ObservationDefinitionProtocol.ObservationDefinitionProtocolValue"
        measurementLocation:
          $ref: "#/components/schemas/ObservationDefinitionProtocol.ObservationDefinitionProtocolValue"
        specimen:
          $ref: "#/components/schemas/ObservationDefinitionProtocol.ObservationDefinitionProtocolValue"
        position:
          $ref: "#/components/schemas/ObservationDefinitionProtocol.ObservationDefinitionProtocolValue"
        dataCollectionCircumstances:
          $ref: "#/components/schemas/ObservationDefinitionProtocol.ObservationDefinitionProtocolValue"
        components:
          type: array
          items:
            $ref: "#/components/schemas/ObservationDefinitionComponent"
    ObservationDefinitionProtocol.ObservationDefinitionProtocolValue:
      type: object
      properties:
        usage:
          type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/ObservationDefinitionProtocol.ObservationDefinitionProtocolValueConcept"
        valueSet:
          type: string
    ObservationDefinitionProtocol.ObservationDefinitionProtocolValueConcept:
      type: object
      properties:
        codeSystem:
          type: string
        code:
          type: string
    ObservationDefinitionUnit:
      type: object
      properties:
        system:
          type: string
        unit:
          type: string
    ObservationDefinitionValue:
      type: object
      properties:
        id:
          type: integer
          format: int64
        behaviour:
          type: string
        expression:
          type: string
        type:
          type: string
        unit:
          $ref: "#/components/schemas/ObservationDefinitionUnit"
        multipleResultsAllowed:
          type: boolean
        usage:
          type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/ObservationDefinitionValue.ObservationDefinitionValueItem"
        valueSet:
          type: string
    ObservationDefinitionValue.ObservationDefinitionValueItem:
      type: object
      properties:
        codeSystem:
          type: string
        code:
          type: string
    OtherTitle:
      type: object
      properties:
        name:
          type: string
        preferred:
          type: boolean
    Package:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        status:
          type: string
        spaceId:
          type: integer
          format: int64
    Page:
      required:
      - spaceId
      type: object
      properties:
        id:
          type: integer
          format: int64
        spaceId:
          type: integer
          format: int64
        code:
          type: string
        status:
          type: string
        settings:
          $ref: "#/components/schemas/Page.PageSettings"
        leaf:
          type: boolean
        contents:
          type: array
          items:
            $ref: "#/components/schemas/PageContent"
        links:
          type: array
          items:
            $ref: "#/components/schemas/PageLink"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/PageTag"
        relations:
          type: array
          items:
            $ref: "#/components/schemas/PageRelation"
    Page.PageAttachment:
      type: object
      properties:
        fileId:
          type: string
        fileName:
          type: string
        contentType:
          type: string
    Page.PageSettings:
      type: object
      properties:
        templateId:
          type: integer
          format: int64
    PageComment:
      required:
      - comment
      - pageContentId
      type: object
      properties:
        id:
          type: integer
          format: int64
        pageContentId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
        text:
          type: string
        comment:
          minLength: 1
          type: string
        status:
          type: string
        replies:
          type: integer
          format: int32
        options:
          $ref: "#/components/schemas/PageComment.PageCommentOptions"
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        modifiedAt:
          type: string
          format: date-time
        modifiedBy:
          type: string
    PageComment.PageCommentOptions:
      type: object
      properties:
        lineNumber:
          type: integer
          format: int32
    PageContent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        pageId:
          type: integer
          format: int64
        spaceId:
          type: integer
          format: int64
        name:
          type: string
        slug:
          type: string
        lang:
          type: string
        content:
          type: string
        contentType:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        modifiedAt:
          type: string
          format: date-time
        modifiedBy:
          type: string
    PageContentHistoryItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        pageContentId:
          type: integer
          format: int64
        pageId:
          type: integer
          format: int64
        spaceId:
          type: integer
          format: int64
        name:
          type: string
        slug:
          type: string
        lang:
          type: string
        content:
          type: string
        contentType:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        modifiedAt:
          type: string
          format: date-time
        modifiedBy:
          type: string
    PageController.PageRequest:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/Page"
        content:
          $ref: "#/components/schemas/PageContent"
    PageLink:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sourceId:
          type: integer
          format: int64
        targetId:
          type: integer
          format: int64
        orderNumber:
          type: integer
          format: int32
    PageLinkMoveRequest:
      type: object
      properties:
        parentLinkId:
          type: integer
          format: int64
        siblingLinkId:
          type: integer
          format: int64
        action:
          type: string
    PageRelation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        pageId:
          type: integer
          format: int64
        spaceId:
          type: integer
          format: int64
        content:
          $ref: "#/components/schemas/CodeName"
        type:
          type: string
        target:
          type: string
    PageTag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tag:
          $ref: "#/components/schemas/Tag"
    PageTreeItem:
      type: object
      properties:
        pageId:
          type: integer
          format: int64
        parentPageId:
          type: integer
          format: int64
        contents:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PageTreeItem.PageTreeItemContent"
        children:
          type: array
          items:
            $ref: "#/components/schemas/PageTreeItem"
    PageTreeItem.PageTreeItemContent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        slug:
          type: string
    PatchUtil.PatchRequest:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/PatchUtil.PatchRequest.PatchField"
    PatchUtil.PatchRequest.PatchField:
      type: object
      properties:
        fieldName:
          type: string
        value: {}
    Permissions:
      type: object
      properties:
        admin:
          type: string
        editor:
          type: string
        viewer:
          type: string
        endorser:
          type: string
    PropertyReference:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        kind:
          type: string
        uri:
          type: string
    Provenance:
      type: object
      properties:
        changes:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Provenance.ProvenanceChange"
        messages:
          type: object
          additionalProperties:
            type: string
        id:
          type: integer
          format: int64
        target:
          $ref: "#/components/schemas/Reference"
        date:
          type: string
          format: date-time
        activity:
          type: string
        author:
          $ref: "#/components/schemas/Reference"
        context:
          type: array
          items:
            $ref: "#/components/schemas/Provenance.ProvenanceContext"
        detail:
          $ref: "#/components/schemas/Provenance.ProvenanceDetail"
    Provenance.ProvenanceChange:
      type: object
      properties:
        left: {}
        right: {}
    Provenance.ProvenanceContext:
      type: object
      properties:
        role:
          type: string
        entity:
          $ref: "#/components/schemas/Reference"
    Provenance.ProvenanceDetail:
      type: object
      properties:
        changes:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Provenance.ProvenanceChange"
        messages:
          type: object
          additionalProperties:
            type: string
    QueryParams:
      type: object
      properties:
        sort:
          type: array
          items:
            type: string
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
    QueryResult.SearchResultMeta:
      type: object
      properties:
        total:
          type: integer
          format: int32
        pages:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        itemsPerPage:
          type: integer
          format: int32
    QueryResult_AssociationType_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AssociationType"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_CodeSystemEntityVersion_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemEntityVersion"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_CodeSystemVersion_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemVersion"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_CodeSystem_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystem"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_Concept_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Concept"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_DefinedProperty_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DefinedProperty"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_EntityProperty_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EntityProperty"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_ImplementationGuideVersion_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ImplementationGuideVersion"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_ImplementationGuide_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ImplementationGuide"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_MapSetAssociation_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MapSetAssociation"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_MapSetConcept_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MapSetConcept"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_MapSetVersion_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MapSetVersion"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_MapSet_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MapSet"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_MeasurementUnit_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MeasurementUnit"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_NamingSystem_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/NamingSystem"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_ObservationDefinition_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ObservationDefinition"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_PageComment_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PageComment"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_PageContentHistoryItem_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PageContentHistoryItem"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_PageContent_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PageContent"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_PageLink_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PageLink"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_PageRelation_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PageRelation"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_Page_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Page"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_Space_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Space"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_StructureDefinition_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StructureDefinition"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_Task_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_Template_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Template"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_TransformationDefinition_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/TransformationDefinition"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_ValueSetVersion_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ValueSetVersion"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    QueryResult_ValueSet_:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ValueSet"
        meta:
          $ref: "#/components/schemas/QueryResult.SearchResultMeta"
    Range_LocalDate_:
      type: object
      properties:
        lower:
          type: string
          format: date
        upper:
          type: string
          format: date
        lowerInclusive:
          type: boolean
        upperInclusive:
          type: boolean
    Reference:
      required:
      - id
      - type
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        display:
          type: string
    RelatedArtifact:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
    RelatedArtifactRequest:
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: string
        type:
          type: string
    SnomedAuthoringStatsResponse:
      type: object
      properties:
        id:
          type: string
        primitive:
          type: boolean
        term:
          type: string
        conceptId:
          type: string
    SnomedBranch:
      type: object
      properties:
        path:
          type: string
        state:
          type: string
        containsContent:
          type: boolean
        locked:
          type: boolean
        creation:
          type: string
          format: date-time
        base:
          type: string
          format: date-time
        head:
          type: string
          format: date-time
        deleted:
          type: boolean
        metadata: {}
    SnomedBranchRequest:
      type: object
      properties:
        parent:
          type: string
        name:
          type: string
        metadata: {}
    SnomedCodeSystem:
      type: object
      properties:
        name:
          type: string
        shortName:
          type: string
        branchPath:
          type: string
        countryCode:
          type: string
        dependantVersionEffectiveTime:
          type: string
        dailyBuildAvailable:
          type: boolean
        languages:
          type: object
          additionalProperties:
            type: string
        latestVersion:
          $ref: "#/components/schemas/SnomedCodeSystem.SnomedCodeSystemVersion"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/SnomedCodeSystem.SnomedCodeSystemVersion"
        modules:
          type: array
          items:
            $ref: "#/components/schemas/SnomedCodeSystem.SnomedCodeSystemModule"
    SnomedCodeSystem.SnomedCodeSystemModule:
      type: object
      properties:
        conceptId:
          type: string
        moduleId:
          type: string
        fsn:
          $ref: "#/components/schemas/SnomedConcept.SnomedConceptName"
        pt:
          $ref: "#/components/schemas/SnomedConcept.SnomedConceptName"
    SnomedCodeSystem.SnomedCodeSystemVersion:
      type: object
      properties:
        shortName:
          type: string
        importDate:
          type: string
          format: date-time
        dependantVersionEffectiveTime:
          type: string
        parentBranchPath:
          type: string
        version:
          type: string
        effectiveDate:
          type: integer
          format: int64
        description:
          type: string
        branchPath:
          type: string
    SnomedCodeSystemUpgradeRequest:
      type: object
      properties:
        newDependantVersion:
          type: string
    SnomedConcept:
      type: object
      properties:
        id:
          type: string
        conceptId:
          type: string
        moduleId:
          type: string
        effectiveTime:
          type: string
        definitionStatus:
          type: string
        fsn:
          $ref: "#/components/schemas/SnomedConcept.SnomedConceptName"
        pt:
          $ref: "#/components/schemas/SnomedConcept.SnomedConceptName"
        active:
          type: boolean
        descriptions:
          type: array
          items:
            $ref: "#/components/schemas/SnomedDescription"
        relationships:
          type: array
          items:
            $ref: "#/components/schemas/SnomedConcept.SnomedRelationship"
        isLeafInferred:
          type: boolean
    SnomedConcept.SnomedConceptName:
      type: object
      properties:
        term:
          type: string
        lang:
          type: string
    SnomedConcept.SnomedRelationship:
      type: object
      properties:
        active:
          type: boolean
        destinationId:
          type: string
        effectiveTime:
          type: string
        groupId:
          type: integer
          format: int64
        id:
          type: string
        moduleId:
          type: string
        relationshipId:
          type: string
        released:
          type: boolean
        sourceId:
          type: string
        target:
          $ref: "#/components/schemas/SnomedConcept"
        type:
          $ref: "#/components/schemas/SnomedConcept"
        typeId:
          type: string
    SnomedConceptSearchParams:
      type: object
      allOf:
      - $ref: "#/components/schemas/QueryParams"
      - properties:
          conceptIds:
            type: array
            items:
              type: string
          term:
            type: string
          termActive:
            type: boolean
          language:
            type: string
          ecl:
            type: string
          semanticTags:
            type: string
          groupByConcept:
            type: boolean
          active:
            type: boolean
          conceptActive:
            type: boolean
          searchAfter:
            type: string
          branch:
            type: string
          all:
            type: boolean
    SnomedDescription:
      type: object
      properties:
        id:
          type: integer
          format: int64
        descriptionId:
          type: string
        conceptId:
          type: string
        lang:
          type: string
        term:
          type: string
        moduleId:
          type: string
        typeId:
          type: string
        caseSignificanceId:
          type: string
        effectiveTime:
          type: string
        active:
          type: boolean
        acceptabilityMap:
          type: object
          additionalProperties:
            type: string
        status:
          type: string
        author:
          type: string
        reviewer:
          type: string
        created:
          type: string
          format: date-time
        reviewed:
          type: string
          format: date-time
        local:
          type: boolean
    SnomedDescriptionItemResponse:
      type: object
      properties:
        buckets:
          $ref: "#/components/schemas/SnomedDescriptionItemResponse.SnomedBuckets"
        items:
          type: array
          items:
            $ref: "#/components/schemas/SnomedDescriptionItemResponse.SnomedDescriptionItem"
    SnomedDescriptionItemResponse.SnomedBuckets:
      type: object
      properties:
        module:
          type: object
          additionalProperties:
            type: integer
            format: int64
        semanticTags:
          type: object
          additionalProperties:
            type: integer
            format: int64
        language:
          type: object
          additionalProperties:
            type: integer
            format: int64
        languageNames:
          type: object
          additionalProperties:
            type: string
        membership:
          type: object
          additionalProperties:
            type: integer
            format: int64
        bucketConcepts:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SnomedConcept"
    SnomedDescriptionItemResponse.SnomedDescriptionItem:
      type: object
      properties:
        term:
          type: string
        active:
          type: boolean
        concept:
          $ref: "#/components/schemas/SnomedConcept"
    SnomedExportRequest:
      type: object
      properties:
        branchPath:
          type: string
        type:
          type: string
    SnomedImportJob:
      type: object
      properties:
        branchPath:
          type: string
        createCodeSystemVersion:
          type: boolean
        errorMessage:
          type: string
        internalRelease:
          type: boolean
        moduleIds:
          type: array
          items:
            type: string
        status:
          type: string
        type:
          type: string
    SnomedRefsetMemberResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/SnomedRefsetResponse.SnomedRefsetItem"
        total:
          type: integer
          format: int64
    SnomedRefsetResponse:
      type: object
      properties:
        memberCountsByReferenceSet:
          type: object
          additionalProperties:
            type: integer
            format: int64
        referenceSets:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SnomedConcept"
        items:
          type: array
          items:
            $ref: "#/components/schemas/SnomedRefsetResponse.SnomedRefsetItem"
    SnomedRefsetResponse.SnomedRefsetItem:
      type: object
      properties:
        active:
          type: boolean
        moduleId:
          type: string
        refsetId:
          type: string
        referencedComponentId:
          type: string
        referencedComponent:
          type: object
          additionalProperties: true
        additionalFields:
          $ref: "#/components/schemas/SnomedRefsetResponse.SnomedRefsetItem.SnomedRefsetAdditionalFields"
    SnomedRefsetResponse.SnomedRefsetItem.SnomedRefsetAdditionalFields:
      type: object
      properties:
        mapTarget:
          type: string
    SnomedSearchResult_SnomedConcept_:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/SnomedConcept"
        total:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        searchAfter:
          type: string
    SnomedTranslation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        descriptionId:
          type: string
        conceptId:
          type: string
        module:
          type: string
        branch:
          type: string
        language:
          type: string
        term:
          type: string
        type:
          type: string
        acceptability:
          type: string
        status:
          type: string
    Space:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        names:
          type: object
          additionalProperties: true
        active:
          type: boolean
        shared:
          type: boolean
        acl: {}
        terminologyServers:
          type: array
          items:
            type: string
        integration:
          $ref: "#/components/schemas/Space.SpaceIntegration"
        packages:
          type: array
          items:
            $ref: "#/components/schemas/Package"
    Space.SpaceIntegration:
      type: object
      properties:
        github:
          $ref: "#/components/schemas/Space.SpaceIntegrationGithub"
    Space.SpaceIntegrationGithub:
      type: object
      properties:
        repo:
          type: string
        dirs:
          type: object
          additionalProperties:
            type: string
    SpaceGithubController.SpaceGithubAuthRequest:
      required:
      - returnUrl
      type: object
      properties:
        returnUrl:
          type: string
    SpaceGithubController.SpaceGithubCommitRequest:
      required:
      - files
      - message
      type: object
      properties:
        message:
          type: string
        files:
          type: array
          items:
            type: string
    SpaceGithubController.SpaceGithubPullRequest:
      required:
      - files
      type: object
      properties:
        files:
          type: array
          items:
            type: string
    SpaceGithubService.SpaceGithubAuthResult:
      required:
      - isAuthenticated
      - redirectUrl
      type: object
      properties:
        isAuthenticated:
          type: boolean
        redirectUrl:
          type: string
    SpaceOverviewResponse:
      type: object
      properties:
        content:
          type: string
    StructureDefinition:
      type: object
      properties:
        id:
          type: integer
          format: int64
        url:
          type: string
        code:
          type: string
        content:
          type: string
        contentType:
          type: string
        contentFormat:
          type: string
        parent:
          type: string
        version:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
    Task:
      type: object
      properties:
        number:
          type: string
        workflow:
          type: string
        project:
          $ref: "#/components/schemas/CodeName"
        type:
          type: string
        status:
          type: string
        priority:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        assignee:
          type: string
        updatedBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        title:
          type: string
        content:
          type: string
        context:
          type: array
          items:
            $ref: "#/components/schemas/Task.TaskContextItem"
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Task.TaskActivity"
    Task.TaskActivity:
      type: object
      properties:
        id:
          type: string
        note:
          type: string
        transition:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Task.TaskActivity.TaskActivityTransition"
        context:
          type: array
          items:
            $ref: "#/components/schemas/Task.TaskActivity.TaskActivityContextItem"
        updatedBy:
          type: string
        updatedAt:
          type: string
          format: date-time
    Task.TaskActivity.TaskActivityContextItem:
      type: object
      properties:
        type:
          type: string
        id: {}
    Task.TaskActivity.TaskActivityTransition:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
    Task.TaskContextItem:
      type: object
      properties:
        type:
          type: string
        id: {}
    Template:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        names:
          type: object
          additionalProperties: true
        contentType:
          type: string
        contents:
          type: array
          items:
            $ref: "#/components/schemas/TemplateContent"
    TemplateContent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        lang:
          type: string
        content:
          type: string
    Topic:
      type: object
      properties:
        text:
          type: string
        tags:
          type: array
          items:
            type: string
    TransformationDefinition:
      required:
      - mapping
      - name
      - resources
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        mapping:
          $ref: "#/components/schemas/TransformationDefinition.TransformationDefinitionResource"
        resources:
          type: array
          items:
            $ref: "#/components/schemas/TransformationDefinition.TransformationDefinitionResource"
        testSource:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        modifiedAt:
          type: string
          format: date-time
        modifiedBy:
          type: string
    TransformationDefinition.TransformationDefinitionResource:
      required:
      - name
      - reference
      - source
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        source:
          type: string
        reference:
          $ref: "#/components/schemas/TransformationDefinition.TransformationDefinitionResourceReference"
    TransformationDefinition.TransformationDefinitionResourceReference:
      type: object
      properties:
        localId:
          type: string
        resourceServerId:
          type: integer
          format: int64
        resourceUrl:
          type: string
        content:
          type: string
    TransformationDefinitionController.FmlComposeResult:
      required:
      - fml
      type: object
      properties:
        fml:
          type: string
    TransformationDefinitionController.FmlGenerateRequest:
      required:
      - structureMap
      type: object
      properties:
        structureMap:
          type: string
    TransformationDefinitionController.FmlGenerateResult:
      required:
      - error
      - fml
      type: object
      properties:
        fml:
          type: string
        error:
          type: string
    TransformationDefinitionController.GenerateInputRequest:
      required:
      - resource
      type: object
      properties:
        resource:
          $ref: "#/components/schemas/TransformationDefinition.TransformationDefinitionResource"
    TransformationDefinitionController.GenerateInputResponse:
      required:
      - resource
      type: object
      properties:
        resource:
          type: string
    TransformationDefinitionController.InstanceTransformationRequest:
      required:
      - source
      type: object
      properties:
        source:
          type: string
    TransformationDefinitionController.ParseRequest:
      required:
      - fml
      type: object
      properties:
        fml:
          type: string
    TransformationDefinitionController.ParseResponse:
      required:
      - error
      - json
      type: object
      properties:
        json:
          type: string
        error:
          type: string
    TransformationDefinitionController.TransformationRequest:
      required:
      - definition
      - source
      type: object
      properties:
        definition:
          $ref: "#/components/schemas/TransformationDefinition"
        source:
          type: string
    TransformationResult:
      type: object
      properties:
        result:
          type: string
        error:
          type: string
    UseContext:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    ValueSet:
      type: object
      properties:
        id:
          type: string
        uri:
          type: string
        publisher:
          type: string
        name:
          type: string
        otherTitle:
          type: array
          items:
            $ref: "#/components/schemas/OtherTitle"
        title:
          type: object
          additionalProperties: true
        description:
          type: object
          additionalProperties: true
        purpose:
          type: object
          additionalProperties: true
        topic:
          $ref: "#/components/schemas/Topic"
        useContext:
          type: array
          items:
            $ref: "#/components/schemas/UseContext"
        narrative:
          type: string
        experimental:
          type: boolean
        sourceReference:
          type: string
        replaces:
          type: string
        externalWebSource:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: "#/components/schemas/Identifier"
        configurationAttributes:
          type: array
          items:
            $ref: "#/components/schemas/ConfigurationAttribute"
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/ContactDetail"
        copyright:
          $ref: "#/components/schemas/Copyright"
        permissions:
          $ref: "#/components/schemas/Permissions"
        settings:
          $ref: "#/components/schemas/ValueSet.ValueSetSettings"
        versions:
          type: array
          items:
            $ref: "#/components/schemas/ValueSetVersion"
        snapshots:
          type: array
          items:
            $ref: "#/components/schemas/ValueSetSnapshot"
    ValueSet.ValueSetSettings:
      type: object
      properties:
        reviewRequired:
          type: boolean
        approvalRequired:
          type: boolean
    ValueSetController.ValueSetVersionDuplicateRequest:
      type: object
      properties:
        valueSet:
          type: string
        version:
          type: string
    ValueSetExpandRequest:
      type: object
      properties:
        valueSet:
          type: string
        valueSetVersion:
          type: string
    ValueSetSnapshot:
      type: object
      properties:
        id:
          type: integer
          format: int64
        valueSet:
          type: string
        valueSetVersion:
          $ref: "#/components/schemas/ValueSetVersionReference"
        conceptsTotal:
          type: integer
          format: int32
        expansion:
          type: array
          items:
            $ref: "#/components/schemas/ValueSetVersionConcept"
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
    ValueSetTransactionRequest:
      type: object
      properties:
        valueSet:
          $ref: "#/components/schemas/ValueSet"
        version:
          $ref: "#/components/schemas/ValueSetVersion"
    ValueSetVersion:
      type: object
      allOf:
      - $ref: "#/components/schemas/ValueSetVersionReference"
      - properties:
          preferredLanguage:
            type: string
          supportedLanguages:
            type: array
            items:
              type: string
          description:
            type: object
            additionalProperties: true
          status:
            type: string
          releaseDate:
            type: string
            format: date
          expirationDate:
            type: string
            format: date
          created:
            type: string
            format: date-time
          algorithm:
            type: string
          ruleSet:
            $ref: "#/components/schemas/ValueSetVersionRuleSet"
          identifiers:
            type: array
            items:
              $ref: "#/components/schemas/Identifier"
          snapshot:
            $ref: "#/components/schemas/ValueSetSnapshot"
    ValueSetVersionConcept:
      type: object
      properties:
        id:
          type: integer
          format: int64
        concept:
          $ref: "#/components/schemas/ValueSetVersionConcept.ValueSetVersionConceptValue"
        display:
          $ref: "#/components/schemas/Designation"
        additionalDesignations:
          type: array
          items:
            $ref: "#/components/schemas/Designation"
        orderNumber:
          type: integer
          format: int32
        enumerated:
          type: boolean
        active:
          type: boolean
        status:
          type: string
        associations:
          type: array
          items:
            $ref: "#/components/schemas/CodeSystemAssociation"
        propertyValues:
          type: array
          items:
            $ref: "#/components/schemas/EntityPropertyValue"
    ValueSetVersionConcept.ValueSetVersionConceptValue:
      type: object
      properties:
        conceptVersionId:
          type: integer
          format: int64
        code:
          type: string
        codeSystem:
          type: string
        codeSystemUri:
          type: string
        baseCodeSystemUri:
          type: string
        codeSystemVersions:
          type: array
          items:
            type: string
    ValueSetVersionReference:
      type: object
      properties:
        id:
          type: integer
          format: int64
        valueSet:
          type: string
        version:
          type: string
    ValueSetVersionRuleSet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        lockedDate:
          type: string
          format: date-time
        inactive:
          type: boolean
        rules:
          type: array
          items:
            $ref: "#/components/schemas/ValueSetVersionRuleSet.ValueSetVersionRule"
    ValueSetVersionRuleSet.ValueSetVersionRule:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        codeSystem:
          type: string
        codeSystemVersion:
          $ref: "#/components/schemas/CodeSystemVersionReference"
        properties:
          type: array
          items:
            type: string
        concepts:
          type: array
          items:
            $ref: "#/components/schemas/ValueSetVersionConcept"
        filters:
          type: array
          items:
            $ref: "#/components/schemas/ValueSetVersionRuleSet.ValueSetVersionRule.ValueSetRuleFilter"
        valueSet:
          type: string
        valueSetVersion:
          $ref: "#/components/schemas/ValueSetVersionReference"
        codeSystemUri:
          type: string
        codeSystemBaseUri:
          type: string
        valueSetUri:
          type: string
    ValueSetVersionRuleSet.ValueSetVersionRule.ValueSetRuleFilter:
      type: object
      properties:
        property:
          $ref: "#/components/schemas/PropertyReference"
        operator:
          type: string
        value: {}
    WikiSpaceController.WikiSpace:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        names:
          type: object
          additionalProperties: true
        active:
          type: boolean
    Workflow:
      type: object
      properties:
        code:
          type: string
        transitions:
          type: array
          items:
            $ref: "#/components/schemas/Workflow.WorkflowTransition"
    Workflow.WorkflowTransition:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
  # securitySchemes:
  #   openid:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: https://tx-cluster.cgmtx.de101.cgm.ag/realms/termx/protocol/openid-connect/auth
  #         tokenUrl: https://tx-cluster.cgmtx.de101.cgm.ag/realms/termx/protocol/openid-connect/token
